{"ast":null,"code":"import { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport { isClient, isBoolean } from '@vueuse/core';\nimport '../../utils/index2.mjs';\nimport { buildProp, definePropType } from '../../utils/vue/props2.mjs';\n\nconst _prop = buildProp({\n  type: definePropType(Boolean),\n  default: null\n});\n\nconst _event = buildProp({\n  type: definePropType(Function)\n});\n\nconst createModelToggleComposable = name => {\n  const useModelToggleProps2 = {\n    [name]: _prop,\n    [`onUpdate:${name}`]: _event\n  };\n  const useModelToggleEmits2 = [`update:${name}`];\n\n  const useModelToggle2 = ({\n    indicator,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide\n  }) => {\n    const instance = getCurrentInstance();\n    const props = instance.props;\n    const {\n      emit\n    } = instance;\n    const updateEventKey = `update:${name}`;\n    const hasUpdateHandler = computed(() => isFunction(props[`onUpdate:${name}`]));\n    const isModelBindingAbsent = computed(() => props[name] === null);\n\n    const doShow = () => {\n      if (indicator.value === true) {\n        return;\n      }\n\n      indicator.value = true;\n\n      if (isFunction(onShow)) {\n        onShow();\n      }\n    };\n\n    const doHide = () => {\n      if (indicator.value === false) {\n        return;\n      }\n\n      indicator.value = false;\n\n      if (isFunction(onHide)) {\n        onHide();\n      }\n    };\n\n    const show = () => {\n      if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n      const shouldEmit = hasUpdateHandler.value && isClient;\n\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow();\n      }\n    };\n\n    const hide = () => {\n      if (props.disabled === true || !isClient) return;\n      const shouldEmit = hasUpdateHandler.value && isClient;\n\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide();\n      }\n    };\n\n    const onChange = val => {\n      if (!isBoolean(val)) return;\n\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n\n    watch(() => props[name], onChange);\n\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      watch(() => ({ ...instance.proxy.$route\n      }), () => {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n\n    onMounted(() => {\n      onChange(props[name]);\n    });\n    return {\n      hide,\n      show,\n      toggle\n    };\n  };\n\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\n\nconst {\n  useModelToggle,\n  useModelToggleProps,\n  useModelToggleEmits\n} = createModelToggleComposable(\"modelValue\");\nexport { createModelToggleComposable, useModelToggle, useModelToggleEmits, useModelToggleProps };","map":{"version":3,"mappings":"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","names":["_prop","buildProp","type","definePropType","Boolean","default","_event","Function","createModelToggleComposable","name","useModelToggleProps2","useModelToggleEmits2","useModelToggle2","indicator","shouldHideWhenRouteChanges","shouldProceed","onShow","onHide","instance","getCurrentInstance","props","emit","updateEventKey","hasUpdateHandler","computed","isFunction","isModelBindingAbsent","doShow","value","doHide","show","disabled","shouldEmit","isClient","hide","onChange","val","isBoolean","toggle","watch","appContext","config","globalProperties","$route","proxy","onMounted","useModelToggle","useModelToggleProps","useModelToggleEmits"],"sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, onMounted, watch } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { buildProp, definePropType, isBoolean } from '@element-plus/utils'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { ComponentPublicInstance, ExtractPropTypes, Ref } from 'vue'\n\nconst _prop = buildProp({\n  type: definePropType<boolean | null>(Boolean),\n  default: null,\n} as const)\nconst _event = buildProp({\n  type: definePropType<(val: boolean) => void>(Function),\n} as const)\n\ntype _UseModelToggleProps<T extends string> = {\n  [K in T]: typeof _prop\n} & {\n  [K in `onUpdate:${T}`]: typeof _event\n}\n\nexport const createModelToggleComposable = <T extends string>(name: T) => {\n  const useModelToggleProps = {\n    [name]: _prop,\n    [`onUpdate:${name}`]: _event,\n  } as _UseModelToggleProps<T>\n\n  const useModelToggleEmits = [`update:${name}`]\n\n  const useModelToggle = ({\n    indicator,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide,\n  }: ModelToggleParams) => {\n    const instance = getCurrentInstance()!\n    const props = instance.props as _UseModelToggleProps<T> & {\n      disabled: boolean\n    }\n    const { emit } = instance\n\n    const updateEventKey = `update:${name}`\n\n    const hasUpdateHandler = computed(() =>\n      isFunction(props[`onUpdate:${name}`])\n    )\n    // when it matches the default value we say this is absent\n    // though this could be mistakenly passed from the user but we need to rule out that\n    // condition\n    const isModelBindingAbsent = computed(() => props[name] === null)\n\n    const doShow = () => {\n      if (indicator.value === true) {\n        return\n      }\n\n      indicator.value = true\n      if (isFunction(onShow)) {\n        onShow()\n      }\n    }\n\n    const doHide = () => {\n      if (indicator.value === false) {\n        return\n      }\n\n      indicator.value = false\n\n      if (isFunction(onHide)) {\n        onHide()\n      }\n    }\n\n    const show = () => {\n      if (\n        props.disabled === true ||\n        (isFunction(shouldProceed) && !shouldProceed())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, true)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow()\n      }\n    }\n\n    const hide = () => {\n      if (props.disabled === true || !isClient) return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, false)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide()\n      }\n    }\n\n    const onChange = (val: boolean) => {\n      if (!isBoolean(val)) return\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false)\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow()\n        } else {\n          doHide()\n        }\n      }\n    }\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide()\n      } else {\n        show()\n      }\n    }\n\n    watch(() => props[name], onChange as any)\n\n    if (\n      shouldHideWhenRouteChanges &&\n      instance.appContext.config.globalProperties.$route !== undefined\n    ) {\n      watch(\n        () => ({\n          ...(\n            instance.proxy as ComponentPublicInstance<{\n              $route: RouteLocationNormalizedLoaded\n            }>\n          ).$route,\n        }),\n        () => {\n          if (shouldHideWhenRouteChanges.value && indicator.value) {\n            hide()\n          }\n        }\n      )\n    }\n\n    onMounted(() => {\n      onChange(props[name] as boolean)\n    })\n\n    return {\n      hide,\n      show,\n      toggle,\n    }\n  }\n\n  return {\n    useModelToggle,\n    useModelToggleProps,\n    useModelToggleEmits,\n  }\n}\n\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } =\n  createModelToggleComposable('modelValue')\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps }\n\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  onShow?: () => void\n  onHide?: () => void\n}\n"]},"metadata":{},"sourceType":"module"}