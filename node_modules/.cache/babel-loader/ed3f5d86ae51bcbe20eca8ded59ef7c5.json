{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { ref, watch } from 'vue';\nimport '../../../utils/index2.mjs';\nimport { genFileId } from './upload3.mjs';\nimport { debugWarn, throwError } from '../../../utils/error2.mjs';\nconst SCOPE = \"ElUpload\";\n\nconst revokeObjectURL = file => {\n  var _a;\n\n  if ((_a = file.url) == null ? void 0 : _a.startsWith(\"blob:\")) {\n    URL.revokeObjectURL(file.url);\n  }\n};\n\nconst useHandlers = (props, uploadRef) => {\n  const uploadFiles = ref([]);\n\n  const getFile = rawFile => uploadFiles.value.find(file => file.uid === rawFile.uid);\n\n  function abort(file) {\n    var _a;\n\n    (_a = uploadRef.value) == null ? void 0 : _a.abort(file);\n  }\n\n  function clearFiles(states = [\"ready\", \"uploading\", \"success\", \"fail\"]) {\n    uploadFiles.value = uploadFiles.value.filter(row => !states.includes(row.status));\n  }\n\n  const handleError = (err, rawFile) => {\n    const file = getFile(rawFile);\n    if (!file) return;\n    file.status = \"fail\";\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);\n    props.onError(err, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  };\n\n  const handleProgress = (evt, rawFile) => {\n    const file = getFile(rawFile);\n    if (!file) return;\n    props.onProgress(evt, file, uploadFiles.value);\n    file.status = \"uploading\";\n    file.percentage = Math.round(evt.percent);\n  };\n\n  const handleSuccess = (response, rawFile) => {\n    const file = getFile(rawFile);\n    if (!file) return;\n    file.status = \"success\";\n    file.response = response;\n    props.onSuccess(response, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  };\n\n  const handleStart = file => {\n    const uploadFile = {\n      name: file.name,\n      percentage: 0,\n      status: \"ready\",\n      size: file.size,\n      raw: file,\n      uid: file.uid\n    };\n\n    if (props.listType === \"picture-card\" || props.listType === \"picture\") {\n      try {\n        uploadFile.url = URL.createObjectURL(file);\n      } catch (err) {\n        debugWarn(SCOPE, err.message);\n        props.onError(err, uploadFile, uploadFiles.value);\n      }\n    }\n\n    uploadFiles.value.push(uploadFile);\n    props.onChange(uploadFile, uploadFiles.value);\n  };\n\n  const handleRemove = async file => {\n    const uploadFile = file instanceof File ? getFile(file) : file;\n    if (!uploadFile) throwError(SCOPE, \"file to be removed not found\");\n\n    const doRemove = file2 => {\n      abort(file2);\n      const fileList = uploadFiles.value;\n      fileList.splice(fileList.indexOf(file2), 1);\n      props.onRemove(file2, fileList);\n      revokeObjectURL(file2);\n    };\n\n    if (props.beforeRemove) {\n      const before = await props.beforeRemove(uploadFile, uploadFiles.value);\n      if (before !== false) doRemove(uploadFile);\n    } else {\n      doRemove(uploadFile);\n    }\n  };\n\n  function submit() {\n    uploadFiles.value.filter(({\n      status\n    }) => status === \"ready\").forEach(({\n      raw\n    }) => {\n      var _a;\n\n      return raw && ((_a = uploadRef.value) == null ? void 0 : _a.upload(raw));\n    });\n  }\n\n  watch(() => props.listType, val => {\n    if (val !== \"picture-card\" && val !== \"picture\") {\n      return;\n    }\n\n    uploadFiles.value = uploadFiles.value.map(file => {\n      const {\n        raw,\n        url\n      } = file;\n\n      if (!url && raw) {\n        try {\n          file.url = URL.createObjectURL(raw);\n        } catch (err) {\n          props.onError(err, file, uploadFiles.value);\n        }\n      }\n\n      return file;\n    });\n  });\n  watch(() => props.fileList, fileList => {\n    for (const file of fileList) {\n      file.uid || (file.uid = genFileId());\n      file.status || (file.status = \"success\");\n    }\n\n    uploadFiles.value = fileList;\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    abort,\n    clearFiles,\n    handleError,\n    handleProgress,\n    handleStart,\n    handleSuccess,\n    handleRemove,\n    submit,\n    uploadFiles\n  };\n};\n\nexport { useHandlers };","map":{"version":3,"mappings":"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","names":["SCOPE","revokeObjectURL","file","_a","url","startsWith","URL","useHandlers","props","uploadRef","uploadFiles","ref","getFile","rawFile","value","find","uid","abort","clearFiles","states","filter","row","includes","status","handleError","err","splice","indexOf","onError","onChange","handleProgress","evt","onProgress","percentage","Math","round","percent","handleSuccess","response","onSuccess","handleStart","uploadFile","name","size","raw","listType","createObjectURL","debugWarn","message","push","handleRemove","File","throwError","doRemove","file2","fileList","onRemove","beforeRemove","before","submit","forEach","upload","watch","val","map","genFileId","immediate","deep"],"sources":["../../../../../../packages/components/upload/src/use-handlers.ts"],"sourcesContent":["import { ref, watch } from 'vue'\nimport { debugWarn, throwError } from '@element-plus/utils'\nimport { genFileId } from './upload'\nimport type { ShallowRef } from 'vue'\nimport type {\n  UploadContentInstance,\n  UploadContentProps,\n} from './upload-content'\nimport type {\n  UploadFile,\n  UploadFiles,\n  UploadProps,\n  UploadRawFile,\n  UploadStatus,\n} from './upload'\n\nconst SCOPE = 'ElUpload'\n\nconst revokeObjectURL = (file: UploadFile) => {\n  if (file.url?.startsWith('blob:')) {\n    URL.revokeObjectURL(file.url)\n  }\n}\n\nexport const useHandlers = (\n  props: UploadProps,\n  uploadRef: ShallowRef<UploadContentInstance | undefined>\n) => {\n  const uploadFiles = ref<UploadFiles>([])\n\n  const getFile = (rawFile: UploadRawFile) =>\n    uploadFiles.value.find((file) => file.uid === rawFile.uid)\n\n  function abort(file: UploadFile) {\n    uploadRef.value?.abort(file)\n  }\n\n  function clearFiles(\n    /** @default ['ready', 'uploading', 'success', 'fail'] */\n    states: UploadStatus[] = ['ready', 'uploading', 'success', 'fail']\n  ) {\n    uploadFiles.value = uploadFiles.value.filter(\n      (row) => !states.includes(row.status)\n    )\n  }\n\n  const handleError: UploadContentProps['onError'] = (err, rawFile) => {\n    const file = getFile(rawFile)\n    if (!file) return\n\n    file.status = 'fail'\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1)\n    props.onError(err, file, uploadFiles.value)\n    props.onChange(file, uploadFiles.value)\n  }\n\n  const handleProgress: UploadContentProps['onProgress'] = (evt, rawFile) => {\n    const file = getFile(rawFile)\n    if (!file) return\n\n    props.onProgress(evt, file, uploadFiles.value)\n    file.status = 'uploading'\n    file.percentage = Math.round(evt.percent)\n  }\n\n  const handleSuccess: UploadContentProps['onSuccess'] = (\n    response,\n    rawFile\n  ) => {\n    const file = getFile(rawFile)\n    if (!file) return\n\n    file.status = 'success'\n    file.response = response\n    props.onSuccess(response, file, uploadFiles.value)\n    props.onChange(file, uploadFiles.value)\n  }\n\n  const handleStart: UploadContentProps['onStart'] = (file) => {\n    const uploadFile: UploadFile = {\n      name: file.name,\n      percentage: 0,\n      status: 'ready',\n      size: file.size,\n      raw: file,\n      uid: file.uid,\n    }\n    if (props.listType === 'picture-card' || props.listType === 'picture') {\n      try {\n        uploadFile.url = URL.createObjectURL(file)\n      } catch (err: unknown) {\n        debugWarn(SCOPE, (err as Error).message)\n        props.onError(err as Error, uploadFile, uploadFiles.value)\n      }\n    }\n    uploadFiles.value.push(uploadFile)\n    props.onChange(uploadFile, uploadFiles.value)\n  }\n\n  const handleRemove: UploadContentProps['onRemove'] = async (\n    file\n  ): Promise<void> => {\n    const uploadFile = file instanceof File ? getFile(file) : file\n    if (!uploadFile) throwError(SCOPE, 'file to be removed not found')\n\n    const doRemove = (file: UploadFile) => {\n      abort(file)\n      const fileList = uploadFiles.value\n      fileList.splice(fileList.indexOf(file), 1)\n      props.onRemove(file, fileList)\n      revokeObjectURL(file)\n    }\n\n    if (props.beforeRemove) {\n      const before = await props.beforeRemove(uploadFile, uploadFiles.value)\n      if (before !== false) doRemove(uploadFile)\n    } else {\n      doRemove(uploadFile)\n    }\n  }\n\n  function submit() {\n    uploadFiles.value\n      .filter(({ status }) => status === 'ready')\n      .forEach(({ raw }) => raw && uploadRef.value?.upload(raw))\n  }\n\n  watch(\n    () => props.listType,\n    (val) => {\n      if (val !== 'picture-card' && val !== 'picture') {\n        return\n      }\n\n      uploadFiles.value = uploadFiles.value.map((file) => {\n        const { raw, url } = file\n        if (!url && raw) {\n          try {\n            file.url = URL.createObjectURL(raw)\n          } catch (err: unknown) {\n            props.onError(err as Error, file, uploadFiles.value)\n          }\n        }\n        return file\n      })\n    }\n  )\n\n  watch(\n    () => props.fileList,\n    (fileList) => {\n      for (const file of fileList) {\n        file.uid ||= genFileId()\n        file.status ||= 'success'\n      }\n      uploadFiles.value = fileList as UploadFiles\n    },\n    { immediate: true, deep: true }\n  )\n\n  return {\n    abort,\n    clearFiles,\n    handleError,\n    handleProgress,\n    handleStart,\n    handleSuccess,\n    handleRemove,\n    submit,\n    uploadFiles,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}