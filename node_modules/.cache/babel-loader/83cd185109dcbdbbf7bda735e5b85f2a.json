{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, computed, watch, onMounted, onUpdated, createVNode } from 'vue';\nimport { NOOP, capitalize } from '@vue/shared';\nimport { useDocumentVisibility, useWindowFocus, useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport { ArrowLeft, ArrowRight, Close } from '@element-plus/icons-vue';\nimport '../../../tokens/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport TabBar from './tab-bar4.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props2.mjs';\nimport { mutable } from '../../../utils/typescript2.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs2.mjs';\nimport { throwError } from '../../../utils/error2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { EVENT_CODE } from '../../../constants/aria2.mjs';\nconst tabNavProps = buildProps({\n  panes: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  currentName: {\n    type: [String, Number],\n    default: \"\"\n  },\n  editable: Boolean,\n  onTabClick: {\n    type: definePropType(Function),\n    default: NOOP\n  },\n  onTabRemove: {\n    type: definePropType(Function),\n    default: NOOP\n  },\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  stretch: Boolean\n});\nconst COMPONENT_NAME = \"ElTabNav\";\nconst TabNav = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabNavProps,\n\n  setup(props, {\n    expose\n  }) {\n    const vm = getCurrentInstance();\n    const rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`);\n    const ns = useNamespace(\"tabs\");\n    const visibility = useDocumentVisibility();\n    const focused = useWindowFocus();\n    const navScroll$ = ref();\n    const nav$ = ref();\n    const el$ = ref();\n    const scrollable = ref(false);\n    const navOffset = ref(0);\n    const isFocus = ref(false);\n    const focusable = ref(true);\n    const sizeName = computed(() => [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\");\n    const navStyle = computed(() => {\n      const dir = sizeName.value === \"width\" ? \"X\" : \"Y\";\n      return {\n        transform: `translate${dir}(-${navOffset.value}px)`\n      };\n    });\n\n    const scrollPrev = () => {\n      if (!navScroll$.value) return;\n      const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];\n      const currentOffset = navOffset.value;\n      if (!currentOffset) return;\n      const newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;\n      navOffset.value = newOffset;\n    };\n\n    const scrollNext = () => {\n      if (!navScroll$.value || !nav$.value) return;\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];\n      const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];\n      const currentOffset = navOffset.value;\n      if (navSize - currentOffset <= containerSize) return;\n      const newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;\n      navOffset.value = newOffset;\n    };\n\n    const scrollToActiveTab = () => {\n      const nav = nav$.value;\n      if (!scrollable.value || !el$.value || !navScroll$.value || !nav) return;\n      const activeTab = el$.value.querySelector(\".is-active\");\n      if (!activeTab) return;\n      const navScroll = navScroll$.value;\n      const isHorizontal = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition);\n      const activeTabBounding = activeTab.getBoundingClientRect();\n      const navScrollBounding = navScroll.getBoundingClientRect();\n      const maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;\n      const currentOffset = navOffset.value;\n      let newOffset = currentOffset;\n\n      if (isHorizontal) {\n        if (activeTabBounding.left < navScrollBounding.left) {\n          newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);\n        }\n\n        if (activeTabBounding.right > navScrollBounding.right) {\n          newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;\n        }\n      } else {\n        if (activeTabBounding.top < navScrollBounding.top) {\n          newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);\n        }\n\n        if (activeTabBounding.bottom > navScrollBounding.bottom) {\n          newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);\n        }\n      }\n\n      newOffset = Math.max(newOffset, 0);\n      navOffset.value = Math.min(newOffset, maxOffset);\n    };\n\n    const update = () => {\n      if (!nav$.value || !navScroll$.value) return;\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];\n      const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];\n      const currentOffset = navOffset.value;\n\n      if (containerSize < navSize) {\n        const currentOffset2 = navOffset.value;\n        scrollable.value = scrollable.value || {};\n        scrollable.value.prev = currentOffset2;\n        scrollable.value.next = currentOffset2 + containerSize < navSize;\n\n        if (navSize - currentOffset2 < containerSize) {\n          navOffset.value = navSize - containerSize;\n        }\n      } else {\n        scrollable.value = false;\n\n        if (currentOffset > 0) {\n          navOffset.value = 0;\n        }\n      }\n    };\n\n    const changeTab = e => {\n      const code = e.code;\n      const {\n        up,\n        down,\n        left,\n        right\n      } = EVENT_CODE;\n      if (![up, down, left, right].includes(code)) return;\n      const tabList = Array.from(e.currentTarget.querySelectorAll(\"[role=tab]\"));\n      const currentIndex = tabList.indexOf(e.target);\n      let nextIndex;\n\n      if (code === left || code === up) {\n        if (currentIndex === 0) {\n          nextIndex = tabList.length - 1;\n        } else {\n          nextIndex = currentIndex - 1;\n        }\n      } else {\n        if (currentIndex < tabList.length - 1) {\n          nextIndex = currentIndex + 1;\n        } else {\n          nextIndex = 0;\n        }\n      }\n\n      tabList[nextIndex].focus();\n      tabList[nextIndex].click();\n      setFocus();\n    };\n\n    const setFocus = () => {\n      if (focusable.value) isFocus.value = true;\n    };\n\n    const removeFocus = () => isFocus.value = false;\n\n    watch(visibility, visibility2 => {\n      if (visibility2 === \"hidden\") {\n        focusable.value = false;\n      } else if (visibility2 === \"visible\") {\n        setTimeout(() => focusable.value = true, 50);\n      }\n    });\n    watch(focused, focused2 => {\n      if (focused2) {\n        setTimeout(() => focusable.value = true, 50);\n      } else {\n        focusable.value = false;\n      }\n    });\n    useResizeObserver(el$, update);\n    onMounted(() => setTimeout(() => scrollToActiveTab(), 0));\n    onUpdated(() => update());\n    expose({\n      scrollToActiveTab,\n      removeFocus\n    });\n    watch(() => props.panes, () => vm.update(), {\n      flush: \"post\"\n    });\n    return () => {\n      const scrollBtn = scrollable.value ? [createVNode(\"span\", {\n        \"class\": [ns.e(\"nav-prev\"), ns.is(\"disabled\", !scrollable.value.prev)],\n        \"onClick\": scrollPrev\n      }, [createVNode(ElIcon, null, {\n        default: () => [createVNode(ArrowLeft, null, null)]\n      })]), createVNode(\"span\", {\n        \"class\": [ns.e(\"nav-next\"), ns.is(\"disabled\", !scrollable.value.next)],\n        \"onClick\": scrollNext\n      }, [createVNode(ElIcon, null, {\n        default: () => [createVNode(ArrowRight, null, null)]\n      })])] : null;\n      const tabs = props.panes.map((pane, index) => {\n        var _a, _b;\n\n        const tabName = pane.props.name || pane.index || `${index}`;\n        const closable = pane.isClosable || props.editable;\n        pane.index = `${index}`;\n        const btnClose = closable ? createVNode(ElIcon, {\n          \"class\": \"is-icon-close\",\n          \"onClick\": ev => props.onTabRemove(pane, ev)\n        }, {\n          default: () => [createVNode(Close, null, null)]\n        }) : null;\n        const tabLabelContent = ((_b = (_a = pane.slots).label) == null ? void 0 : _b.call(_a)) || pane.props.label;\n        const tabindex = pane.active ? 0 : -1;\n        return createVNode(\"div\", {\n          \"ref\": `tab-${tabName}`,\n          \"class\": [ns.e(\"item\"), ns.is(rootTabs.props.tabPosition), ns.is(\"active\", pane.active), ns.is(\"disabled\", pane.props.disabled), ns.is(\"closable\", closable), ns.is(\"focus\", isFocus.value)],\n          \"id\": `tab-${tabName}`,\n          \"key\": `tab-${tabName}`,\n          \"aria-controls\": `pane-${tabName}`,\n          \"role\": \"tab\",\n          \"aria-selected\": pane.active,\n          \"tabindex\": tabindex,\n          \"onFocus\": () => setFocus(),\n          \"onBlur\": () => removeFocus(),\n          \"onClick\": ev => {\n            removeFocus();\n            props.onTabClick(pane, tabName, ev);\n          },\n          \"onKeydown\": ev => {\n            if (closable && (ev.code === EVENT_CODE.delete || ev.code === EVENT_CODE.backspace)) {\n              props.onTabRemove(pane, ev);\n            }\n          }\n        }, [...[tabLabelContent, btnClose]]);\n      });\n      return createVNode(\"div\", {\n        \"ref\": el$,\n        \"class\": [ns.e(\"nav-wrap\"), ns.is(\"scrollable\", !!scrollable.value), ns.is(rootTabs.props.tabPosition)]\n      }, [scrollBtn, createVNode(\"div\", {\n        \"class\": ns.e(\"nav-scroll\"),\n        \"ref\": navScroll$\n      }, [createVNode(\"div\", {\n        \"class\": [ns.e(\"nav\"), ns.is(rootTabs.props.tabPosition), ns.is(\"stretch\", props.stretch && [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition))],\n        \"ref\": nav$,\n        \"style\": navStyle.value,\n        \"role\": \"tablist\",\n        \"onKeydown\": changeTab\n      }, [...[!props.type ? createVNode(TabBar, {\n        \"tabs\": [...props.panes]\n      }, null) : null, tabs]])])]);\n    };\n  }\n\n});\nexport { TabNav as default, tabNavProps };","map":{"version":3,"mappings":"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","names":["tabNavProps","buildProps","panes","type","definePropType","Array","default","mutable","currentName","String","Number","editable","Boolean","onTabClick","Function","NOOP","onTabRemove","values","stretch","COMPONENT_NAME","TabNav","defineComponent","name","props","expose","vm","getCurrentInstance","throwError","ns","useNamespace","visibility","useDocumentVisibility","focused","useWindowFocus","navScroll$","ref","nav$","el$","scrollable","navOffset","isFocus","focusable","sizeName","computed","includes","rootTabs","tabPosition","navStyle","dir","value","transform","scrollPrev","containerSize","capitalize","currentOffset","newOffset","scrollNext","scrollToActiveTab","nav","activeTab","querySelector","navScroll","navScrollBounding","maxOffset","isHorizontal","offsetWidth","activeTabBounding","right","top","bottom","max","update","navSize","prev","currentOffset2","next","e","up","changeTab","EVENT_CODE","down","tabList","code","nextIndex","currentTarget","currentIndex","click","setFocus","watch","focus","setTimeout","scrollBtn","useResizeObserver","_createVNode","onUpdated","removeFocus","map","pane","flush","_a","_b","closable","index","btnClose","tabName","ev","tabindex","tabLabelContent","TabBar","tabs"],"sources":["../../../../../../packages/components/tabs/src/tab-nav.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport {\n  useDocumentVisibility,\n  useResizeObserver,\n  useWindowFocus,\n} from '@vueuse/core'\nimport {\n  buildProps,\n  capitalize,\n  definePropType,\n  mutable,\n  throwError,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowLeft, ArrowRight, Close } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport TabBar from './tab-bar.vue'\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { TabsPaneContext } from '@element-plus/tokens'\nimport type { TabPanelName } from './tabs'\n\ninterface Scrollable {\n  next?: boolean\n  prev?: number\n}\n\nexport const tabNavProps = buildProps({\n  panes: {\n    type: definePropType<TabsPaneContext[]>(Array),\n    default: () => mutable([] as const),\n  },\n  currentName: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  onTabClick: {\n    type: definePropType<\n      (tab: TabsPaneContext, tabName: TabPanelName, ev: Event) => void\n    >(Function),\n    default: NOOP,\n  },\n  onTabRemove: {\n    type: definePropType<(tab: TabsPaneContext, ev: Event) => void>(Function),\n    default: NOOP,\n  },\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  stretch: Boolean,\n} as const)\n\nexport type TabNavProps = ExtractPropTypes<typeof tabNavProps>\n\nconst COMPONENT_NAME = 'ElTabNav'\nconst TabNav = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabNavProps,\n\n  setup(props, { expose }) {\n    const vm = getCurrentInstance()!\n\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`)\n\n    const ns = useNamespace('tabs')\n    const visibility = useDocumentVisibility()\n    const focused = useWindowFocus()\n\n    const navScroll$ = ref<HTMLDivElement>()\n    const nav$ = ref<HTMLDivElement>()\n    const el$ = ref<HTMLDivElement>()\n\n    const scrollable = ref<false | Scrollable>(false)\n    const navOffset = ref(0)\n    const isFocus = ref(false)\n    const focusable = ref(true)\n\n    const sizeName = computed(() =>\n      ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n    )\n    const navStyle = computed<CSSProperties>(() => {\n      const dir = sizeName.value === 'width' ? 'X' : 'Y'\n      return {\n        transform: `translate${dir}(-${navOffset.value}px)`,\n      }\n    })\n\n    const scrollPrev = () => {\n      if (!navScroll$.value) return\n\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (!currentOffset) return\n\n      const newOffset =\n        currentOffset > containerSize ? currentOffset - containerSize : 0\n\n      navOffset.value = newOffset\n    }\n\n    const scrollNext = () => {\n      if (!navScroll$.value || !nav$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (navSize - currentOffset <= containerSize) return\n\n      const newOffset =\n        navSize - currentOffset > containerSize * 2\n          ? currentOffset + containerSize\n          : navSize - containerSize\n\n      navOffset.value = newOffset\n    }\n\n    const scrollToActiveTab = () => {\n      const nav = nav$.value\n      if (!scrollable.value || !el$.value || !navScroll$.value || !nav) return\n\n      const activeTab = el$.value.querySelector('.is-active')\n      if (!activeTab) return\n\n      const navScroll = navScroll$.value\n      const isHorizontal = ['top', 'bottom'].includes(\n        rootTabs.props.tabPosition\n      )\n      const activeTabBounding = activeTab.getBoundingClientRect()\n      const navScrollBounding = navScroll.getBoundingClientRect()\n      const maxOffset = isHorizontal\n        ? nav.offsetWidth - navScrollBounding.width\n        : nav.offsetHeight - navScrollBounding.height\n      const currentOffset = navOffset.value\n      let newOffset = currentOffset\n\n      if (isHorizontal) {\n        if (activeTabBounding.left < navScrollBounding.left) {\n          newOffset =\n            currentOffset - (navScrollBounding.left - activeTabBounding.left)\n        }\n        if (activeTabBounding.right > navScrollBounding.right) {\n          newOffset =\n            currentOffset + activeTabBounding.right - navScrollBounding.right\n        }\n      } else {\n        if (activeTabBounding.top < navScrollBounding.top) {\n          newOffset =\n            currentOffset - (navScrollBounding.top - activeTabBounding.top)\n        }\n        if (activeTabBounding.bottom > navScrollBounding.bottom) {\n          newOffset =\n            currentOffset +\n            (activeTabBounding.bottom - navScrollBounding.bottom)\n        }\n      }\n      newOffset = Math.max(newOffset, 0)\n      navOffset.value = Math.min(newOffset, maxOffset)\n    }\n\n    const update = () => {\n      if (!nav$.value || !navScroll$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (containerSize < navSize) {\n        const currentOffset = navOffset.value\n        scrollable.value = scrollable.value || {}\n        scrollable.value.prev = currentOffset\n        scrollable.value.next = currentOffset + containerSize < navSize\n        if (navSize - currentOffset < containerSize) {\n          navOffset.value = navSize - containerSize\n        }\n      } else {\n        scrollable.value = false\n        if (currentOffset > 0) {\n          navOffset.value = 0\n        }\n      }\n    }\n\n    const changeTab = (e: KeyboardEvent) => {\n      const code = e.code\n\n      const { up, down, left, right } = EVENT_CODE\n      if (![up, down, left, right].includes(code)) return\n\n      // 左右上下键更换tab\n      const tabList = Array.from(\n        (e.currentTarget as HTMLDivElement).querySelectorAll<HTMLDivElement>(\n          '[role=tab]'\n        )\n      )\n      const currentIndex = tabList.indexOf(e.target as HTMLDivElement)\n\n      let nextIndex: number\n      if (code === left || code === up) {\n        // left\n        if (currentIndex === 0) {\n          // first\n          nextIndex = tabList.length - 1\n        } else {\n          nextIndex = currentIndex - 1\n        }\n      } else {\n        // right\n        if (currentIndex < tabList.length - 1) {\n          // not last\n          nextIndex = currentIndex + 1\n        } else {\n          nextIndex = 0\n        }\n      }\n      tabList[nextIndex].focus() // 改变焦点元素\n      tabList[nextIndex].click() // 选中下一个tab\n      setFocus()\n    }\n\n    const setFocus = () => {\n      if (focusable.value) isFocus.value = true\n    }\n    const removeFocus = () => (isFocus.value = false)\n\n    watch(visibility, (visibility) => {\n      if (visibility === 'hidden') {\n        focusable.value = false\n      } else if (visibility === 'visible') {\n        setTimeout(() => (focusable.value = true), 50)\n      }\n    })\n    watch(focused, (focused) => {\n      if (focused) {\n        setTimeout(() => (focusable.value = true), 50)\n      } else {\n        focusable.value = false\n      }\n    })\n\n    useResizeObserver(el$, update)\n\n    onMounted(() => setTimeout(() => scrollToActiveTab(), 0))\n    onUpdated(() => update())\n\n    expose({\n      scrollToActiveTab,\n      removeFocus,\n    })\n\n    watch(\n      () => props.panes,\n      () => vm.update(),\n      { flush: 'post' }\n    )\n\n    return () => {\n      const scrollBtn = scrollable.value\n        ? [\n            <span\n              class={[\n                ns.e('nav-prev'),\n                ns.is('disabled', !scrollable.value.prev),\n              ]}\n              onClick={scrollPrev}\n            >\n              <ElIcon>\n                <ArrowLeft />\n              </ElIcon>\n            </span>,\n            <span\n              class={[\n                ns.e('nav-next'),\n                ns.is('disabled', !scrollable.value.next),\n              ]}\n              onClick={scrollNext}\n            >\n              <ElIcon>\n                <ArrowRight />\n              </ElIcon>\n            </span>,\n          ]\n        : null\n\n      const tabs = props.panes.map((pane, index) => {\n        const tabName = pane.props.name || pane.index || `${index}`\n        const closable: boolean = pane.isClosable || props.editable\n        pane.index = `${index}`\n\n        const btnClose = closable ? (\n          <ElIcon\n            class=\"is-icon-close\"\n            // `onClick` not exist when generate dts\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            onClick={(ev: MouseEvent) => props.onTabRemove(pane, ev)}\n          >\n            <Close />\n          </ElIcon>\n        ) : null\n\n        const tabLabelContent = pane.slots.label?.() || pane.props.label\n        const tabindex = pane.active ? 0 : -1\n\n        return (\n          <div\n            ref={`tab-${tabName}`}\n            class={[\n              ns.e('item'),\n              ns.is(rootTabs.props.tabPosition),\n              ns.is('active', pane.active),\n              ns.is('disabled', pane.props.disabled),\n              ns.is('closable', closable),\n              ns.is('focus', isFocus.value),\n            ]}\n            id={`tab-${tabName}`}\n            key={`tab-${tabName}`}\n            aria-controls={`pane-${tabName}`}\n            role=\"tab\"\n            aria-selected={pane.active}\n            tabindex={tabindex}\n            onFocus={() => setFocus()}\n            onBlur={() => removeFocus()}\n            onClick={(ev: MouseEvent) => {\n              removeFocus()\n              props.onTabClick(pane, tabName, ev)\n            }}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (\n                closable &&\n                (ev.code === EVENT_CODE.delete ||\n                  ev.code === EVENT_CODE.backspace)\n              ) {\n                props.onTabRemove(pane, ev)\n              }\n            }}\n          >\n            {...[tabLabelContent, btnClose]}\n          </div>\n        )\n      })\n\n      return (\n        <div\n          ref={el$}\n          class={[\n            ns.e('nav-wrap'),\n            ns.is('scrollable', !!scrollable.value),\n            ns.is(rootTabs.props.tabPosition),\n          ]}\n        >\n          {scrollBtn}\n          <div class={ns.e('nav-scroll')} ref={navScroll$}>\n            <div\n              class={[\n                ns.e('nav'),\n                ns.is(rootTabs.props.tabPosition),\n                ns.is(\n                  'stretch',\n                  props.stretch &&\n                    ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n                ),\n              ]}\n              ref={nav$}\n              style={navStyle.value}\n              role=\"tablist\"\n              onKeydown={changeTab}\n            >\n              {...[\n                !props.type ? <TabBar tabs={[...props.panes]} /> : null,\n                tabs,\n              ]}\n            </div>\n          </div>\n        </div>\n      )\n    }\n  },\n})\n\nexport type TabNavInstance = InstanceType<typeof TabNav>\nexport default TabNav\n"]},"metadata":{},"sourceType":"module"}