{"ast":null,"code":"import { defineComponent, useAttrs, ref, computed, nextTick, watch, onMounted, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, renderSlot, createElementVNode, toDisplayString, mergeProps, Fragment, createBlock, withCtx, createCommentVNode } from 'vue';\nimport { isClient, useThrottleFn, useEventListener } from '@vueuse/core';\nimport '../../../hooks/index2.mjs';\nimport { ElImageViewer } from '../../image-viewer/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport { imageProps, imageEmits } from './image3.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index2.mjs';\nimport { isInContainer } from '../../../utils/dom/position2.mjs';\nimport { isElement } from '../../../utils/types2.mjs';\nimport { isString } from '@vue/shared';\nimport { getScrollContainer } from '../../../utils/dom/scroll2.mjs';\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst __default__ = {\n  name: \"ElImage\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: imageProps,\n  emits: imageEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    let prevOverflow = \"\";\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image\");\n    const rawAttrs = useAttrs();\n    const attrs = useAttrs$1();\n    const hasLoadError = ref(false);\n    const loading = ref(true);\n    const imgWidth = ref(0);\n    const imgHeight = ref(0);\n    const showViewer = ref(false);\n    const container = ref();\n\n    const _scrollContainer = ref();\n\n    let stopScrollListener;\n    let stopWheelListener;\n    const containerStyle = computed(() => rawAttrs.style);\n    const imageStyle = computed(() => {\n      const {\n        fit\n      } = props;\n\n      if (isClient && fit) {\n        return {\n          objectFit: fit\n        };\n      }\n\n      return {};\n    });\n    const preview = computed(() => {\n      const {\n        previewSrcList\n      } = props;\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    });\n    const imageIndex = computed(() => {\n      const {\n        previewSrcList,\n        initialIndex\n      } = props;\n      let previewIndex = initialIndex;\n\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0;\n      }\n\n      return previewIndex;\n    });\n\n    const loadImage = () => {\n      if (!isClient) return;\n      loading.value = true;\n      hasLoadError.value = false;\n      const img = new Image();\n      const currentImageSrc = props.src;\n      img.addEventListener(\"load\", e => {\n        if (currentImageSrc !== props.src) {\n          return;\n        }\n\n        handleLoad(e, img);\n      });\n      img.addEventListener(\"error\", e => {\n        if (currentImageSrc !== props.src) {\n          return;\n        }\n\n        handleError(e);\n      });\n      Object.entries(rawAttrs).forEach(([key, value]) => {\n        if (key.toLowerCase() === \"onload\") return;\n        img.setAttribute(key, value);\n      });\n      img.src = currentImageSrc;\n    };\n\n    function handleLoad(e, img) {\n      imgWidth.value = img.width;\n      imgHeight.value = img.height;\n      loading.value = false;\n      hasLoadError.value = false;\n    }\n\n    function handleError(event) {\n      loading.value = false;\n      hasLoadError.value = true;\n      emit(\"error\", event);\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage();\n        removeLazyLoadListener();\n      }\n    }\n\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);\n\n    async function addLazyLoadListener() {\n      var _a;\n\n      if (!isClient) return;\n      await nextTick();\n      const {\n        scrollContainer\n      } = props;\n\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer;\n      } else if (isString(scrollContainer) && scrollContainer !== \"\") {\n        _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value);\n      }\n\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(_scrollContainer, \"scroll\", lazyLoadHandler);\n        setTimeout(() => handleLazyLoad(), 100);\n      }\n    }\n\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return;\n      stopScrollListener == null ? void 0 : stopScrollListener();\n      _scrollContainer.value = void 0;\n    }\n\n    function wheelHandler(e) {\n      if (!e.ctrlKey) return;\n\n      if (e.deltaY < 0) {\n        e.preventDefault();\n        return false;\n      } else if (e.deltaY > 0) {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    function clickHandler() {\n      if (!preview.value) return;\n      stopWheelListener = useEventListener(\"wheel\", wheelHandler, {\n        passive: false\n      });\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n      showViewer.value = true;\n    }\n\n    function closeViewer() {\n      stopWheelListener == null ? void 0 : stopWheelListener();\n      document.body.style.overflow = prevOverflow;\n      showViewer.value = false;\n      emit(\"close\");\n    }\n\n    function switchViewer(val) {\n      emit(\"switch\", val);\n    }\n\n    watch(() => props.src, () => {\n      if (props.lazy) {\n        loading.value = true;\n        hasLoadError.value = false;\n        removeLazyLoadListener();\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    onMounted(() => {\n      if (props.lazy) {\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"container\",\n        ref: container,\n        class: normalizeClass([unref(ns).b(), _ctx.$attrs.class]),\n        style: normalizeStyle(unref(containerStyle))\n      }, [loading.value ? renderSlot(_ctx.$slots, \"placeholder\", {\n        key: 0\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"placeholder\"))\n      }, null, 2)]) : hasLoadError.value ? renderSlot(_ctx.$slots, \"error\", {\n        key: 1\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"error\"))\n      }, toDisplayString(unref(t)(\"el.image.error\")), 3)]) : (openBlock(), createElementBlock(\"img\", mergeProps({\n        key: 2\n      }, unref(attrs), {\n        src: _ctx.src,\n        style: unref(imageStyle),\n        class: [unref(ns).e(\"inner\"), unref(preview) ? unref(ns).e(\"preview\") : \"\"],\n        onClick: clickHandler\n      }), null, 16, _hoisted_1)), unref(preview) ? (openBlock(), createElementBlock(Fragment, {\n        key: 3\n      }, [showViewer.value ? (openBlock(), createBlock(unref(ElImageViewer), {\n        key: 0,\n        \"z-index\": _ctx.zIndex,\n        \"initial-index\": unref(imageIndex),\n        infinite: _ctx.infinite,\n        \"url-list\": _ctx.previewSrcList,\n        \"hide-on-click-modal\": _ctx.hideOnClickModal,\n        teleported: _ctx.previewTeleported,\n        \"close-on-press-escape\": _ctx.closeOnPressEscape,\n        onClose: closeViewer,\n        onSwitch: switchViewer\n      }, {\n        default: withCtx(() => [_ctx.$slots.viewer ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"viewer\")])) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"z-index\", \"initial-index\", \"infinite\", \"url-list\", \"hide-on-click-modal\", \"teleported\", \"close-on-press-escape\"])) : createCommentVNode(\"v-if\", true)], 2112)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n\n});\n\nvar Image$1 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/image/src/image.vue\"]]);\n\nexport { Image$1 as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmEA;IAEA;MAAAA;IAAA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IACA;IACA;IAEA;IAEA;MACA;QAAAC;MAAA;;MACA;QACA;UAAAC;QAAA;MACA;;MACA;IACA,CANA;IAQA;MACA;QAAAC;MAAA;MACA;IACA,CAHA;IAKA;MACA;QAAAA;QAAAC;MAAA;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAPA;;IASA;MACA;MAGAC;MACAC;MAEA;MACA;MAGAC;QACA;UACA;QACA;;QACAC;MACA,CALA;MAMAD;QACA;UACA;QACA;;QACAE;MACA,CALA;MASAC;QAEA;QACAH;MACA,CAJA;MAKAA;IACA,CAhCA;;IAkCA;MACAI;MACAC;MACAP;MACAC;IACA;;IAEA;MACAD;MACAC;MACAO;IACA;;IAEA;MACA;QACAC;QACAC;MACA;IACA;;IAEA;;IAEA;MACA;;MAAA,eAEA;MAEA;MACA;QAAAC;MAAA;;MACA;QACAC;MACA,CAFA,MAEA,aACAD,eADA,KACAA,sBADA,EACA;QACAC;MACA,CAHA,MAGA;QACAA;MAEA;;MACA;QAKAC;QACAC;MACA;IAEA;;IACA;MAAA,8DAEA;MACAD;MACAD;IAEA;;IACA;MAAA,gBAEA;;MACA;QACAG;QACA;MACA,CAHA,MAGA;QACAA;QACA;MACA;IAEA;;IAEA;MAAA,oBAEA;MAAAC,iBACA;QACAC;MADA,EADA;MAMAC;MACAC;MACAC;IAEA;;IACA;MACAJ;MACAG;MACAC;MACAZ;IAEA;;IACA;MACAA;IAGA;;IAEAa;MAEA;QACArB;QACAC;QACAS;QACAY;MACA,CALA,MAKA;QACAb;MAEA;IAEA,CAZA;IAaAc;MACA;QACAD;MACA,CAFA,MAEA;QACAb;MACA;KALA","names":["t","fit","objectFit","previewSrcList","initialIndex","previewIndex","loading","hasLoadError","img","handleLoad","handleError","Object","imgWidth","imgHeight","emit","loadImage","removeLazyLoadListener","scrollContainer","_scrollContainer","stopScrollListener","setTimeout","e","stopWheelListener","passive","prevOverflow","document","showViewer","watch","addLazyLoadListener","onMounted"],"sources":["../../../../../../packages/components/image/src/image.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" :class=\"[ns.b(), $attrs.class]\" :style=\"containerStyle\">\n    <slot v-if=\"loading\" name=\"placeholder\">\n      <div :class=\"ns.e('placeholder')\" />\n    </slot>\n    <slot v-else-if=\"hasLoadError\" name=\"error\">\n      <div :class=\"ns.e('error')\">{{ t('el.image.error') }}</div>\n    </slot>\n    <img\n      v-else\n      v-bind=\"attrs\"\n      :src=\"src\"\n      :style=\"imageStyle\"\n      :class=\"[ns.e('inner'), preview ? ns.e('preview') : '']\"\n      @click=\"clickHandler\"\n    />\n    <template v-if=\"preview\">\n      <image-viewer\n        v-if=\"showViewer\"\n        :z-index=\"zIndex\"\n        :initial-index=\"imageIndex\"\n        :infinite=\"infinite\"\n        :url-list=\"previewSrcList\"\n        :hide-on-click-modal=\"hideOnClickModal\"\n        :teleported=\"previewTeleported\"\n        :close-on-press-escape=\"closeOnPressEscape\"\n        @close=\"closeViewer\"\n        @switch=\"switchViewer\"\n      >\n        <div v-if=\"$slots.viewer\">\n          <slot name=\"viewer\" />\n        </div>\n      </image-viewer>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  useAttrs as useRawAttrs,\n  watch,\n} from 'vue'\nimport { isClient, useEventListener, useThrottleFn } from '@vueuse/core'\nimport { useAttrs, useLocale, useNamespace } from '@element-plus/hooks'\nimport ImageViewer from '@element-plus/components/image-viewer'\nimport {\n  getScrollContainer,\n  isElement,\n  isInContainer,\n  isString,\n} from '@element-plus/utils'\nimport { imageEmits, imageProps } from './image'\n\nimport type { CSSProperties, StyleValue } from 'vue'\n\ndefineOptions({\n  name: 'ElImage',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(imageProps)\nconst emit = defineEmits(imageEmits)\n\nlet prevOverflow = ''\n\nconst { t } = useLocale()\nconst ns = useNamespace('image')\nconst rawAttrs = useRawAttrs()\nconst attrs = useAttrs()\n\nconst hasLoadError = ref(false)\nconst loading = ref(true)\nconst imgWidth = ref(0)\nconst imgHeight = ref(0)\nconst showViewer = ref(false)\nconst container = ref<HTMLElement>()\n\nconst _scrollContainer = ref<HTMLElement | Window>()\nlet stopScrollListener: (() => void) | undefined\nlet stopWheelListener: (() => void) | undefined\n\nconst containerStyle = computed(() => rawAttrs.style as StyleValue)\n\nconst imageStyle = computed<CSSProperties>(() => {\n  const { fit } = props\n  if (isClient && fit) {\n    return { objectFit: fit }\n  }\n  return {}\n})\n\nconst preview = computed(() => {\n  const { previewSrcList } = props\n  return Array.isArray(previewSrcList) && previewSrcList.length > 0\n})\n\nconst imageIndex = computed(() => {\n  const { previewSrcList, initialIndex } = props\n  let previewIndex = initialIndex\n  if (initialIndex > previewSrcList.length - 1) {\n    previewIndex = 0\n  }\n  return previewIndex\n})\n\nconst loadImage = () => {\n  if (!isClient) return\n\n  // reset status\n  loading.value = true\n  hasLoadError.value = false\n\n  const img = new Image()\n  const currentImageSrc = props.src\n\n  // load & error callbacks are only responsible for currentImageSrc\n  img.addEventListener('load', (e) => {\n    if (currentImageSrc !== props.src) {\n      return\n    }\n    handleLoad(e, img)\n  })\n  img.addEventListener('error', (e) => {\n    if (currentImageSrc !== props.src) {\n      return\n    }\n    handleError(e)\n  })\n\n  // bind html attrs\n  // so it can behave consistently\n  Object.entries(rawAttrs).forEach(([key, value]) => {\n    // avoid onload to be overwritten\n    if (key.toLowerCase() === 'onload') return\n    img.setAttribute(key, value as string)\n  })\n  img.src = currentImageSrc\n}\n\nfunction handleLoad(e: Event, img: HTMLImageElement) {\n  imgWidth.value = img.width\n  imgHeight.value = img.height\n  loading.value = false\n  hasLoadError.value = false\n}\n\nfunction handleError(event: Event) {\n  loading.value = false\n  hasLoadError.value = true\n  emit('error', event)\n}\n\nfunction handleLazyLoad() {\n  if (isInContainer(container.value, _scrollContainer.value)) {\n    loadImage()\n    removeLazyLoadListener()\n  }\n}\n\nconst lazyLoadHandler = useThrottleFn(handleLazyLoad, 200)\n\nasync function addLazyLoadListener() {\n  if (!isClient) return\n\n  await nextTick()\n\n  const { scrollContainer } = props\n  if (isElement(scrollContainer)) {\n    _scrollContainer.value = scrollContainer\n  } else if (isString(scrollContainer) && scrollContainer !== '') {\n    _scrollContainer.value =\n      document.querySelector<HTMLElement>(scrollContainer) ?? undefined\n  } else if (container.value) {\n    _scrollContainer.value = getScrollContainer(container.value)\n  }\n\n  if (_scrollContainer.value) {\n    stopScrollListener = useEventListener(\n      _scrollContainer,\n      'scroll',\n      lazyLoadHandler\n    )\n    setTimeout(() => handleLazyLoad(), 100)\n  }\n}\n\nfunction removeLazyLoadListener() {\n  if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return\n\n  stopScrollListener?.()\n  _scrollContainer.value = undefined\n}\n\nfunction wheelHandler(e: WheelEvent) {\n  if (!e.ctrlKey) return\n\n  if (e.deltaY < 0) {\n    e.preventDefault()\n    return false\n  } else if (e.deltaY > 0) {\n    e.preventDefault()\n    return false\n  }\n}\n\nfunction clickHandler() {\n  // don't show viewer when preview is false\n  if (!preview.value) return\n\n  stopWheelListener = useEventListener('wheel', wheelHandler, {\n    passive: false,\n  })\n\n  // prevent body scroll\n  prevOverflow = document.body.style.overflow\n  document.body.style.overflow = 'hidden'\n  showViewer.value = true\n}\n\nfunction closeViewer() {\n  stopWheelListener?.()\n  document.body.style.overflow = prevOverflow\n  showViewer.value = false\n  emit('close')\n}\n\nfunction switchViewer(val: number) {\n  emit('switch', val)\n}\n\nwatch(\n  () => props.src,\n  () => {\n    if (props.lazy) {\n      // reset status\n      loading.value = true\n      hasLoadError.value = false\n      removeLazyLoadListener()\n      addLazyLoadListener()\n    } else {\n      loadImage()\n    }\n  }\n)\n\nonMounted(() => {\n  if (props.lazy) {\n    addLazyLoadListener()\n  } else {\n    loadImage()\n  }\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}