{"ast":null,"code":"import { defineComponent, reactive, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, withCtx, createElementVNode, toDisplayString } from 'vue';\nimport { ElTooltip } from '../../tooltip/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { useSliderButton } from './useSliderButton2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSliderButton\",\n  components: {\n    ElTooltip\n  },\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    tooltipClass: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT],\n\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"slider\");\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue\n    });\n    const {\n      button,\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition\n    } = useSliderButton(props, initData, emit);\n    const {\n      hovering,\n      dragging\n    } = toRefs(initData);\n    return {\n      ns,\n      button,\n      tooltip,\n      tooltipVisible,\n      showTooltip,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n      hovering,\n      dragging\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"button-wrapper\"), {\n      hover: _ctx.hovering,\n      dragging: _ctx.dragging\n    }]),\n    style: normalizeStyle(_ctx.wrapperStyle),\n    tabindex: \"0\",\n    onMouseenter: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),\n    onMouseleave: _cache[2] || (_cache[2] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),\n    onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.onButtonDown && _ctx.onButtonDown(...args)),\n    onTouchstart: _cache[4] || (_cache[4] = (...args) => _ctx.onButtonDown && _ctx.onButtonDown(...args)),\n    onFocus: _cache[5] || (_cache[5] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),\n    onBlur: _cache[6] || (_cache[6] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),\n    onKeydown: _cache[7] || (_cache[7] = (...args) => _ctx.onKeyDown && _ctx.onKeyDown(...args))\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"tooltip\",\n    visible: _ctx.tooltipVisible,\n    \"onUpdate:visible\": _cache[0] || (_cache[0] = $event => _ctx.tooltipVisible = $event),\n    placement: \"top\",\n    \"stop-popper-mouse-event\": false,\n    \"popper-class\": _ctx.tooltipClass,\n    disabled: !_ctx.showTooltip,\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(_ctx.formatValue), 1)]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.e(\"button\"), {\n        hover: _ctx.hovering,\n        dragging: _ctx.dragging\n      }])\n    }, null, 2)]),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\", \"disabled\"])], 38);\n}\n\nvar SliderButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue\"]]);\n\nexport { SliderButton as default };","map":{"version":3,"mappings":";;;;;;;;;AAsCA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM,kBADuB;EAG7BC,UAAY;IACVC;EADU,CAHiB;EAO7BC,KAAO;IACLC,UAAY;MACVC,IAAM,QADI;MAEVC,OAAS;IAFC,CADP;IAKLC,QAAU;MACRF,IAAM,SADE;MAERC,OAAS;IAFD,CALL;IASLE,YAAc;MACZH,IAAM,QADM;MAEZC,OAAS;IAFG;EATT,CAPsB;EAsB7BG,OAAO,CAACC,kBAAD,CAtBsB;;EAwB7BC,MAAMR,KAAN,EAAa;IAAES;EAAF,CAAb,EAAuB;IACf,WAAKC,aAAa,QAAb,CAAL;IACN,MAAMC,WAAWC,QAAS;MACxBC,QAAU,OADc;MAExBC,QAAU,OAFc;MAGxBC,OAAS,OAHe;MAIxBC,MAAQ,GAJgB;MAKxBC,QAAU,GALc;MAMxBC,MAAQ,GANgB;MAOxBC,QAAU,GAPc;MAQxBC,aAAe,GARS;MASxBC,WAAa,GATW;MAUxBC,UAAUtB,KAAM;IAVQ,EAA1B;IAaM;MACJuB,MADI;MAEJC,OAFI;MAGJC,WAHI;MAIJC,cAJI;MAKJC,YALI;MAMJC,WANI;MAOJC,gBAPI;MAQJC,gBARI;MASJC,YATI;MAUJC,SAVI;MAWJC;IAXI,IAYFC,gBAAgBlC,KAAhB,EAAuBW,QAAvB,EAAiCF,IAAjC,CAZE;IAcN,MAAM;MAAEI,QAAF;MAAYC;IAAZ,IAAyBqB,OAAOxB,QAAP,CAA/B;IAEO;MACLyB,EADK;MAELb,MAFK;MAGLC,OAHK;MAILE,cAJK;MAKLD,WALK;MAMLE,YANK;MAOLC,WAPK;MAQLC,gBARK;MASLC,gBATK;MAULC,YAVK;MAWLC,SAXK;MAYLC,WAZK;MAcLpB,QAdK;MAeLC;IAfK;EAiBT;;AAxE6B,EAA/B;;;;;sBArCEuB,kBA2BM;IA1BJC,GAAI,UA0BA;IAzBHC,OAAKC,cAAG,UAAGC,CAAH,CAAI,gBAAJ,GAAiC;MAAAC;MAAQ5B,UAAE6B,IAAQ;IAAlB,CAAjC,EAyBL;IAxBHC,OAAKC,eAAEF,IAAY,aAAdE,CAwBF;IAvBJC,QAAS,KAuBL;IAtBHC,cAAUC,MAAE,GAAF,KAAEA,gFAAF,CAsBP;IArBHC,cAAUD,MAAE,GAAF,KAAEA,gFAAF,CAqBP;IApBHE,aAASF,MAAE,GAAF,KAAEA,wEAAF,CAoBN;IAnBHG,cAAUH,MAAE,GAAF,KAAEA,wEAAF,CAmBP;IAlBHI,SAAKJ,MAAE,GAAF,KAAEA,gFAAF,CAkBF;IAjBHK,QAAIL,MAAE,GAAF,KAAEA,gFAAF,CAiBD;IAhBHM,WAAON,MAAE,GAAF,KAAEA,kEAAF;EAgBJ,GAhBM,CAEVO,WAaa;IAZXjB,GAAI,WAYO;IAXHkB,OAAS,qBAWN;IAXoB,qFAWpB;IAVXC,SAAU,OAUC;IATV,2BAAyB,KASf;IARV,gBAAcd,iBAQJ;IAPVe,UAAQ,CAAGf,gBAOD;IANXgB;EAMW,GANX;IAEWC,SAAOC,QAChB,MAA8B,CAA9BC,mBAA8B,MAA9B,EAA8B,IAA9B,EAA8BC,gBAArBpB,IAAW,YAAU,CAA9B,EAAoB,CAApB,CAA8B,CADdkB,CAFlB;qBAKA,MAAgE,CAAhEC,kBAAgE;MAA1DvB,OAAKC,cAAG,UAAGC,CAAH,CAAI,QAAJ,GAAyB;QAAAC;QAAQ5B,UAAE6B,IAAQ;MAAlB,CAAzB;IAAkD,GAAP,IAAO,EAAP,CAAO,GALhE;;EAAA,CAMW,6CAfH,CAgBN","names":["_sfc_main","defineComponent","name","components","ElTooltip","props","modelValue","type","default","vertical","tooltipClass","emits","UPDATE_MODEL_EVENT","setup","emit","useNamespace","initData","reactive","hovering","dragging","isClick","startX","currentX","startY","currentY","startPosition","newPosition","oldValue","button","tooltip","showTooltip","tooltipVisible","wrapperStyle","formatValue","handleMouseEnter","handleMouseLeave","onButtonDown","onKeyDown","setPosition","useSliderButton","toRefs","ns","_createElementBlock","ref","class","_normalizeClass","e","hover","_ctx","style","_normalizeStyle","tabindex","onMouseenter","_cache","onMouseleave","onMousedown","onTouchstart","onFocus","onBlur","onKeydown","_createVNode","visible","placement","disabled","persistent","content","_withCtx","_createElementVNode","toDisplayString"],"sources":["../../../../../../packages/components/slider/src/button.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"button\"\n    :class=\"[ns.e('button-wrapper'), { hover: hovering, dragging }]\"\n    :style=\"wrapperStyle\"\n    tabindex=\"0\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @mousedown=\"onButtonDown\"\n    @touchstart=\"onButtonDown\"\n    @focus=\"handleMouseEnter\"\n    @blur=\"handleMouseLeave\"\n    @keydown=\"onKeyDown\"\n  >\n    <el-tooltip\n      ref=\"tooltip\"\n      v-model:visible=\"tooltipVisible\"\n      placement=\"top\"\n      :stop-popper-mouse-event=\"false\"\n      :popper-class=\"tooltipClass\"\n      :disabled=\"!showTooltip\"\n      persistent\n    >\n      <template #content>\n        <span>{{ formatValue }}</span>\n      </template>\n      <div :class=\"[ns.e('button'), { hover: hovering, dragging }]\" />\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs } from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useSliderButton } from './useSliderButton'\n\nexport default defineComponent({\n  name: 'ElSliderButton',\n\n  components: {\n    ElTooltip,\n  },\n\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    tooltipClass: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT],\n\n  setup(props, { emit }) {\n    const ns = useNamespace('slider')\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue,\n    })\n\n    const {\n      button,\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n    } = useSliderButton(props, initData, emit)\n\n    const { hovering, dragging } = toRefs(initData)\n\n    return {\n      ns,\n      button,\n      tooltip,\n      tooltipVisible,\n      showTooltip,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n\n      hovering,\n      dragging,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}