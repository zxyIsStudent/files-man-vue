{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { isNil } from 'lodash-unified';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { buildProps } from '../../../utils/vue/props2.mjs';\nimport { componentSizes } from '../../../constants/size2.mjs';\nimport { isNumber } from '@vueuse/core';\nconst inputNumberProps = buildProps({\n  id: {\n    type: String,\n    default: void 0\n  },\n  step: {\n    type: Number,\n    default: 1\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false\n  },\n  max: {\n    type: Number,\n    default: Number.POSITIVE_INFINITY\n  },\n  min: {\n    type: Number,\n    default: Number.NEGATIVE_INFINITY\n  },\n  modelValue: {\n    type: Number\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    values: componentSizes\n  },\n  controls: {\n    type: Boolean,\n    default: true\n  },\n  controlsPosition: {\n    type: String,\n    default: \"\",\n    values: [\"\", \"right\"]\n  },\n  valueOnClear: {\n    type: [String, Number, null],\n    validator: val => val === null || isNumber(val) || [\"min\", \"max\"].includes(val),\n    default: null\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: val => val >= 0 && val === Number.parseInt(`${val}`, 10)\n  }\n});\nconst inputNumberEmits = {\n  change: (prev, cur) => prev !== cur,\n  blur: e => e instanceof FocusEvent,\n  focus: e => e instanceof FocusEvent,\n  input: val => isNumber(val) || isNil(val),\n  \"update:modelValue\": val => isNumber(val) || isNil(val)\n};\nexport { inputNumberEmits, inputNumberProps };","map":{"version":3,"mappings":";;;;;;;AAGY,MAACA,gBAAgB,GAAGC,UAAU,CAAC;EACzCC,EAAE,EAAE;IACFC,IAAI,EAAEC,MADJ;IAEFC,OAAO,EAAE,KAAK;EAFZ,CADqC;EAKzCC,IAAI,EAAE;IACJH,IAAI,EAAEI,MADF;IAEJF,OAAO,EAAE;EAFL,CALmC;EASzCG,YAAY,EAAE;IACZL,IAAI,EAAEM,OADM;IAEZJ,OAAO,EAAE;EAFG,CAT2B;EAazCK,GAAG,EAAE;IACHP,IAAI,EAAEI,MADH;IAEHF,OAAO,EAAEE,MAAM,CAACI;EAFb,CAboC;EAiBzCC,GAAG,EAAE;IACHT,IAAI,EAAEI,MADH;IAEHF,OAAO,EAAEE,MAAM,CAACM;EAFb,CAjBoC;EAqBzCC,UAAU,EAAE;IACVX,IAAI,EAAEI;EADI,CArB6B;EAwBzCQ,QAAQ,EAAE;IACRZ,IAAI,EAAEM,OADE;IAERJ,OAAO,EAAE;EAFD,CAxB+B;EA4BzCW,IAAI,EAAE;IACJb,IAAI,EAAEC,MADF;IAEJa,MAAM,EAAEC;EAFJ,CA5BmC;EAgCzCC,QAAQ,EAAE;IACRhB,IAAI,EAAEM,OADE;IAERJ,OAAO,EAAE;EAFD,CAhC+B;EAoCzCe,gBAAgB,EAAE;IAChBjB,IAAI,EAAEC,MADU;IAEhBC,OAAO,EAAE,EAFO;IAGhBY,MAAM,EAAE,CAAC,EAAD,EAAK,OAAL;EAHQ,CApCuB;EAyCzCI,YAAY,EAAE;IACZlB,IAAI,EAAE,CAACC,MAAD,EAASG,MAAT,EAAiB,IAAjB,CADM;IAEZe,SAAS,EAAGC,GAAD,IAASA,GAAG,KAAK,IAAR,IAAgBC,QAAQ,CAACD,GAAD,CAAxB,IAAiC,CAAC,KAAD,EAAQ,KAAR,EAAeE,QAAf,CAAwBF,GAAxB,CAFzC;IAGZlB,OAAO,EAAE;EAHG,CAzC2B;EA8CzCqB,IAAI,EAAEtB,MA9CmC;EA+CzCuB,KAAK,EAAEvB,MA/CkC;EAgDzCwB,WAAW,EAAExB,MAhD4B;EAiDzCyB,SAAS,EAAE;IACT1B,IAAI,EAAEI,MADG;IAETe,SAAS,EAAGC,GAAD,IAASA,GAAG,IAAI,CAAP,IAAYA,GAAG,KAAKhB,MAAM,CAACuB,QAAP,CAAiB,GAAEP,GAAI,EAAvB,EAA0B,EAA1B;EAF/B;AAjD8B,CAAD,CAA9B;AAsDA,MAACQ,gBAAgB,GAAG;EAC9BC,MAAM,EAAE,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,KAAKC,GADF;EAE9BC,IAAI,EAAGC,CAAD,IAAOA,CAAC,YAAYC,UAFI;EAG9BC,KAAK,EAAGF,CAAD,IAAOA,CAAC,YAAYC,UAHG;EAI9BE,KAAK,EAAGhB,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBiB,KAAK,CAACjB,GAAD,CAJR;EAK9B,qBAAsBA,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBiB,KAAK,CAACjB,GAAD;AALtB,CAApB","names":["inputNumberProps","buildProps","id","type","String","default","step","Number","stepStrictly","Boolean","max","POSITIVE_INFINITY","min","NEGATIVE_INFINITY","modelValue","disabled","size","values","componentSizes","controls","controlsPosition","valueOnClear","validator","val","isNumber","includes","name","label","placeholder","precision","parseInt","inputNumberEmits","change","prev","cur","blur","e","FocusEvent","focus","input","isNil"],"sources":["../../../../../../packages/components/input-number/src/input-number.ts"],"sourcesContent":["import { isNil } from 'lodash-unified'\nimport { buildProps, isNumber } from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\n\nexport const inputNumberProps = buildProps({\n  id: {\n    type: String,\n    default: undefined,\n  },\n  step: {\n    type: Number,\n    default: 1,\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false,\n  },\n  max: {\n    type: Number,\n    default: Number.POSITIVE_INFINITY,\n  },\n  min: {\n    type: Number,\n    default: Number.NEGATIVE_INFINITY,\n  },\n  modelValue: {\n    type: Number,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  size: {\n    type: String,\n    values: componentSizes,\n  },\n  controls: {\n    type: Boolean,\n    default: true,\n  },\n  controlsPosition: {\n    type: String,\n    default: '',\n    values: ['', 'right'],\n  },\n  valueOnClear: {\n    type: [String, Number, null],\n    validator: (val: 'min' | 'max' | number | null) =>\n      val === null || isNumber(val) || ['min', 'max'].includes(val),\n    default: null,\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: (val: number) =>\n      val >= 0 && val === Number.parseInt(`${val}`, 10),\n  },\n} as const)\n\nexport const inputNumberEmits = {\n  change: (prev: number | undefined, cur: number | undefined) => prev !== cur,\n  blur: (e: FocusEvent) => e instanceof FocusEvent,\n  focus: (e: FocusEvent) => e instanceof FocusEvent,\n  input: (val: number | null | undefined) => isNumber(val) || isNil(val),\n  'update:modelValue': (val: number | undefined) => isNumber(val) || isNil(val),\n}\n"]},"metadata":{},"sourceType":"module"}