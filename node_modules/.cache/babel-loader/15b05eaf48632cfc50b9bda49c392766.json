{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, ref, computed, resolveComponent, openBlock, createBlock, withCtx, normalizeClass, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js';\nimport { ElSelect } from '../../select/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport { Clock, CircleClose } from '@element-plus/icons-vue';\nimport '../../../hooks/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { componentSizes } from '../../../constants/size2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\ndayjs.extend(customParseFormat);\nconst {\n  Option: ElOption\n} = ElSelect;\n\nconst parseTime = time => {\n  const values = (time || \"\").split(\":\");\n\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10);\n    const minutes = Number.parseInt(values[1], 10);\n    const timeUpper = time.toUpperCase();\n\n    if (timeUpper.includes(\"AM\") && hours === 12) {\n      hours = 0;\n    } else if (timeUpper.includes(\"PM\") && hours !== 12) {\n      hours += 12;\n    }\n\n    return {\n      hours,\n      minutes\n    };\n  }\n\n  return null;\n};\n\nconst compareTime = (time1, time2) => {\n  const value1 = parseTime(time1);\n  const value2 = parseTime(time2);\n  const minutes1 = value1.minutes + value1.hours * 60;\n  const minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n\nconst padTime = time => {\n  return `${time}`.padStart(2, \"0\");\n};\n\nconst formatTime = time => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`;\n};\n\nconst nextTime = (time, step) => {\n  const timeValue = parseTime(time);\n  const stepValue = parseTime(step);\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\n\nconst _sfc_main = defineComponent({\n  name: \"ElTimeSelect\",\n  components: {\n    ElSelect,\n    ElOption,\n    ElIcon\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  props: {\n    format: {\n      type: String,\n      default: \"HH:mm\"\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    editable: {\n      type: Boolean,\n      default: true\n    },\n    effect: {\n      type: String,\n      default: \"light\"\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      values: componentSizes,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    start: {\n      type: String,\n      default: \"09:00\"\n    },\n    end: {\n      type: String,\n      default: \"18:00\"\n    },\n    step: {\n      type: String,\n      default: \"00:30\"\n    },\n    minTime: {\n      type: String,\n      default: \"\"\n    },\n    maxTime: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    prefixIcon: {\n      type: [String, Object],\n      default: Clock\n    },\n    clearIcon: {\n      type: [String, Object],\n      default: CircleClose\n    }\n  },\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n\n  setup(props) {\n    const nsInput = useNamespace(\"input\");\n    const select = ref(null);\n    const value = computed(() => props.modelValue);\n    const start = computed(() => {\n      const time = parseTime(props.start);\n      return formatTime(time);\n    });\n    const end = computed(() => {\n      const time = parseTime(props.end);\n      return formatTime(time);\n    });\n    const step = computed(() => {\n      const time = parseTime(props.step);\n      return formatTime(time);\n    });\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime);\n      return time ? formatTime(time) : null;\n    });\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime);\n      return time ? formatTime(time) : null;\n    });\n    const items = computed(() => {\n      const result = [];\n\n      if (props.start && props.end && props.step) {\n        let current = start.value;\n        let currentTime;\n\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, \"HH:mm\").format(props.format);\n          result.push({\n            value: currentTime,\n            disabled: compareTime(current, minTime.value || \"-1:-1\") <= 0 || compareTime(current, maxTime.value || \"100:100\") >= 0\n          });\n          current = nextTime(current, step.value);\n        }\n      }\n\n      return result;\n    });\n\n    const blur = () => {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    const focus = () => {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    return {\n      nsInput,\n      select,\n      value,\n      items,\n      blur,\n      focus\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = resolveComponent(\"el-option\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_select = resolveComponent(\"el-select\");\n\n  return openBlock(), createBlock(_component_el_select, {\n    ref: \"select\",\n    \"model-value\": _ctx.value,\n    disabled: _ctx.disabled,\n    clearable: _ctx.clearable,\n    \"clear-icon\": _ctx.clearIcon,\n    size: _ctx.size,\n    effect: _ctx.effect,\n    placeholder: _ctx.placeholder,\n    \"default-first-option\": \"\",\n    filterable: _ctx.editable,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = event => _ctx.$emit(\"update:modelValue\", event)),\n    onChange: _cache[1] || (_cache[1] = event => _ctx.$emit(\"change\", event)),\n    onBlur: _cache[2] || (_cache[2] = event => _ctx.$emit(\"blur\", event)),\n    onFocus: _cache[3] || (_cache[3] = event => _ctx.$emit(\"focus\", event))\n  }, {\n    prefix: withCtx(() => [_ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass(_ctx.nsInput.e(\"prefix-icon\"))\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)]),\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, item => {\n      return openBlock(), createBlock(_component_el_option, {\n        key: item.value,\n        label: item.value,\n        value: item.value,\n        disabled: item.disabled\n      }, null, 8, [\"label\", \"value\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\"]);\n}\n\nvar TimeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue\"]]);\n\nexport { TimeSelect as default };","map":{"version":3,"mappings":"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","names":["dayjs","extend","customParseFormat","Option","ElOption","ElSelect","parseTime","time","values","split","length","hours","parseInt","minutes","toUpperCase","timeUpper","compareTime","time1","time2","minutes1","value1","minutes2","value2","padTime","padStart","formatTime","nextTime","step","next","timeValue","stepValue","Math","floor","_sfc_main","defineComponent","name","components","ElIcon","model","prop","event","props","format","type","default","modelValue","disabled","editable","effect","clearable","size","placeholder","start","end","minTime","maxTime","prefixIcon","String","Object","clearIcon","emits","setup","useNamespace","ref","value","computed","result","current","currentTime","push","blur","nsInput","select","items","focus","_component_el_select","_openBlock","_ctx","filterable","_cache","$emit","onChange","onBlur","onFocus","prefix","key","_createCommentVNode","_createElementBlock","label"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :effect=\"effect\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('prefix-icon')\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { CircleClose, Clock } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport { componentSizes } from '@element-plus/constants'\nimport type { Component, PropType } from 'vue'\ndayjs.extend(customParseFormat)\n\nconst { Option: ElOption } = ElSelect\n\ninterface Time {\n  hours: number\n  minutes: number\n}\n\nconst parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10)\n    const minutes = Number.parseInt(values[1], 10)\n    const timeUpper = time.toUpperCase()\n    if (timeUpper.includes('AM') && hours === 12) {\n      hours = 0\n    } else if (timeUpper.includes('PM') && hours !== 12) {\n      hours += 12\n    }\n    return {\n      hours,\n      minutes,\n    }\n  }\n  return null\n}\nconst compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  const value2 = parseTime(time2)\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\nconst padTime = (time: number | string) => {\n  return `${time}`.padStart(2, '0')\n}\nconst formatTime = (time: Time): string => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`\n}\nconst nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  const stepValue = parseTime(step)\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n\nexport default defineComponent({\n  name: 'ElTimeSelect',\n  components: { ElSelect, ElOption, ElIcon },\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props: {\n    format: {\n      type: String,\n      default: 'HH:mm',\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    editable: {\n      type: Boolean,\n      default: true,\n    },\n    effect: {\n      type: String as PropType<'light' | 'dark' | string>,\n      default: 'light',\n    },\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      values: componentSizes,\n      default: '',\n    },\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    start: {\n      type: String,\n      default: '09:00',\n    },\n    end: {\n      type: String,\n      default: '18:00',\n    },\n    step: {\n      type: String,\n      default: '00:30',\n    },\n    minTime: {\n      type: String,\n      default: '',\n    },\n    maxTime: {\n      type: String,\n      default: '',\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: Clock,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n  },\n  emits: ['change', 'blur', 'focus', 'update:modelValue'],\n  setup(props) {\n    const nsInput = useNamespace('input')\n    const select = ref(null)\n\n    const value = computed(() => props.modelValue)\n    const start = computed(() => {\n      const time = parseTime(props.start)\n      return formatTime(time)\n    })\n    const end = computed(() => {\n      const time = parseTime(props.end)\n      return formatTime(time)\n    })\n    const step = computed(() => {\n      const time = parseTime(props.step)\n      return formatTime(time)\n    })\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime)\n      return time ? formatTime(time) : null\n    })\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime)\n      return time ? formatTime(time) : null\n    })\n    const items = computed(() => {\n      const result = []\n      if (props.start && props.end && props.step) {\n        let current = start.value\n        let currentTime\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, 'HH:mm').format(props.format)\n          result.push({\n            value: currentTime,\n            disabled:\n              compareTime(current, minTime.value || '-1:-1') <= 0 ||\n              compareTime(current, maxTime.value || '100:100') >= 0,\n          })\n          current = nextTime(current, step.value)\n        }\n      }\n      return result\n    })\n    const blur = () => {\n      select.value?.blur?.()\n    }\n    const focus = () => {\n      select.value?.focus?.()\n    }\n\n    return {\n      nsInput,\n      select,\n      value,\n      items,\n      blur,\n      focus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}