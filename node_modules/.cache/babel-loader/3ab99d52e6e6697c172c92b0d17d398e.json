{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, inject, ref, watch, nextTick, computed, unref, provide, resolveComponent, openBlock, createBlock, mergeProps, withCtx, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, createElementBlock, createElementVNode, renderSlot, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport { isEqual } from 'lodash-unified';\nimport { onClickOutside } from '@vueuse/core';\nimport '../../../../hooks/index2.mjs';\nimport '../../../../tokens/index2.mjs';\nimport { ElInput } from '../../../input/index2.mjs';\nimport { ElIcon } from '../../../icon/index2.mjs';\nimport { ElTooltip } from '../../../tooltip/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport '../../../../constants/index2.mjs';\nimport { Clock, Calendar } from '@element-plus/icons-vue';\nimport { timePickerDefaultProps } from './props2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isEmpty } from '../../../../utils/types2.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index2.mjs';\nimport { formContextKey, formItemContextKey } from '../../../../tokens/form2.mjs';\nimport { debugWarn } from '../../../../utils/error2.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria2.mjs';\nimport { useSize } from '../../../../hooks/use-common-props/index2.mjs';\n\nconst dateEquals = function (a, b) {\n  const aIsDate = a instanceof Date;\n  const bIsDate = b instanceof Date;\n\n  if (aIsDate && bIsDate) {\n    return a.getTime() === b.getTime();\n  }\n\n  if (!aIsDate && !bIsDate) {\n    return a === b;\n  }\n\n  return false;\n};\n\nconst valueEquals = function (a, b) {\n  const aIsArray = Array.isArray(a);\n  const bIsArray = Array.isArray(b);\n\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return a.every((item, index) => dateEquals(item, b[index]));\n  }\n\n  if (!aIsArray && !bIsArray) {\n    return dateEquals(a, b);\n  }\n\n  return false;\n};\n\nconst parser = function (date, format, lang) {\n  const day = isEmpty(format) || format === \"x\" ? dayjs(date).locale(lang) : dayjs(date, format).locale(lang);\n  return day.isValid() ? day : void 0;\n};\n\nconst formatter = function (date, format, lang) {\n  if (isEmpty(format)) return date;\n  if (format === \"x\") return +date;\n  return dayjs(date).locale(lang).format(format);\n};\n\nconst _sfc_main = defineComponent({\n  name: \"Picker\",\n  components: {\n    ElInput,\n    ElTooltip,\n    ElIcon\n  },\n  props: timePickerDefaultProps,\n  emits: [\"update:modelValue\", \"change\", \"focus\", \"blur\", \"calendar-change\", \"panel-change\", \"visible-change\", \"keydown\"],\n\n  setup(props, ctx) {\n    const {\n      lang\n    } = useLocale();\n    const nsDate = useNamespace(\"date\");\n    const nsInput = useNamespace(\"input\");\n    const nsRange = useNamespace(\"range\");\n    const elForm = inject(formContextKey, {});\n    const elFormItem = inject(formItemContextKey, {});\n    const elPopperOptions = inject(\"ElPopperOptions\", {});\n    const refPopper = ref();\n    const inputRef = ref();\n    const pickerVisible = ref(false);\n    const pickerActualVisible = ref(false);\n    const valueOnOpen = ref(null);\n    let hasJustTabExitedInput = false;\n    let ignoreFocusEvent = false;\n    watch(pickerVisible, val => {\n      if (!val) {\n        userInput.value = null;\n        nextTick(() => {\n          emitChange(props.modelValue);\n        });\n      } else {\n        valueOnOpen.value = props.modelValue;\n      }\n    });\n\n    const emitChange = (val, isClear) => {\n      var _a;\n\n      if (isClear || !valueEquals(val, valueOnOpen.value)) {\n        ctx.emit(\"change\", val);\n        props.validateEvent && ((_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err)));\n      }\n    };\n\n    const emitInput = val => {\n      if (!valueEquals(props.modelValue, val)) {\n        let formatValue;\n\n        if (Array.isArray(val)) {\n          formatValue = val.map(_ => formatter(_, props.valueFormat, lang.value));\n        } else if (val) {\n          formatValue = formatter(val, props.valueFormat, lang.value);\n        }\n\n        ctx.emit(\"update:modelValue\", val ? formatValue : val, lang.value);\n      }\n    };\n\n    const emitKeydown = e => {\n      ctx.emit(\"keydown\", e);\n    };\n\n    const refInput = computed(() => {\n      if (inputRef.value) {\n        const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;\n\n        return Array.from(_r.querySelectorAll(\"input\"));\n      }\n\n      return [];\n    });\n    const refStartInput = computed(() => {\n      return refInput == null ? void 0 : refInput.value[0];\n    });\n    const refEndInput = computed(() => {\n      return refInput == null ? void 0 : refInput.value[1];\n    });\n\n    const setSelectionRange = (start, end, pos) => {\n      const _inputs = refInput.value;\n      if (!_inputs.length) return;\n\n      if (!pos || pos === \"min\") {\n        _inputs[0].setSelectionRange(start, end);\n\n        _inputs[0].focus();\n      } else if (pos === \"max\") {\n        _inputs[1].setSelectionRange(start, end);\n\n        _inputs[1].focus();\n      }\n    };\n\n    const onPick = (date = \"\", visible = false) => {\n      if (!visible) {\n        focus(true, true);\n      }\n\n      pickerVisible.value = visible;\n      let result;\n\n      if (Array.isArray(date)) {\n        result = date.map(_ => _.toDate());\n      } else {\n        result = date ? date.toDate() : date;\n      }\n\n      userInput.value = null;\n      emitInput(result);\n    };\n\n    const onBeforeShow = () => {\n      pickerActualVisible.value = true;\n    };\n\n    const onShow = () => {\n      ctx.emit(\"visible-change\", true);\n    };\n\n    const onKeydownPopperContent = event => {\n      if ((event == null ? void 0 : event.key) === EVENT_CODE.esc) {\n        focus(true, true);\n      }\n    };\n\n    const onHide = () => {\n      pickerActualVisible.value = false;\n      ignoreFocusEvent = false;\n      ctx.emit(\"visible-change\", false);\n    };\n\n    const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {\n      ignoreFocusEvent = isIgnoreFocusEvent;\n      let input = refStartInput.value;\n\n      if (!focusStartInput && isRangeInput.value) {\n        input = refEndInput.value;\n      }\n\n      if (input) {\n        input.focus();\n      }\n    };\n\n    const handleFocusInput = e => {\n      if (props.readonly || pickerDisabled.value || pickerVisible.value || ignoreFocusEvent) {\n        return;\n      }\n\n      pickerVisible.value = true;\n      ctx.emit(\"focus\", e);\n    };\n\n    let currentHandleBlurDeferCallback;\n\n    const handleBlurInput = e => {\n      const handleBlurDefer = async () => {\n        setTimeout(() => {\n          var _a, _b;\n\n          if (currentHandleBlurDeferCallback === handleBlurDefer) {\n            if (!(((_a = refPopper.value) == null ? void 0 : _a.isFocusInsideContent()) && !hasJustTabExitedInput) && refInput.value.filter(input => {\n              return input.contains(document.activeElement);\n            }).length === 0) {\n              handleChange();\n              pickerVisible.value = false;\n              ctx.emit(\"blur\", e);\n              props.validateEvent && ((_b = elFormItem.validate) == null ? void 0 : _b.call(elFormItem, \"blur\").catch(err => debugWarn(err)));\n            }\n\n            hasJustTabExitedInput = false;\n          }\n        }, 0);\n      };\n\n      currentHandleBlurDeferCallback = handleBlurDefer;\n      handleBlurDefer();\n    };\n\n    const pickerDisabled = computed(() => {\n      return props.disabled || elForm.disabled;\n    });\n    const parsedValue = computed(() => {\n      let result;\n\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          result = pickerOptions.value.getDefaultValue();\n        }\n      } else {\n        if (Array.isArray(props.modelValue)) {\n          result = props.modelValue.map(_ => parser(_, props.valueFormat, lang.value));\n        } else {\n          result = parser(props.modelValue, props.valueFormat, lang.value);\n        }\n      }\n\n      if (pickerOptions.value.getRangeAvailableTime) {\n        const availableResult = pickerOptions.value.getRangeAvailableTime(result);\n\n        if (!isEqual(availableResult, result)) {\n          result = availableResult;\n          emitInput(Array.isArray(result) ? result.map(_ => _.toDate()) : result.toDate());\n        }\n      }\n\n      if (Array.isArray(result) && result.some(_ => !_)) {\n        result = [];\n      }\n\n      return result;\n    });\n    const displayValue = computed(() => {\n      if (!pickerOptions.value.panelReady) return;\n      const formattedValue = formatDayjsToString(parsedValue.value);\n\n      if (Array.isArray(userInput.value)) {\n        return [userInput.value[0] || formattedValue && formattedValue[0] || \"\", userInput.value[1] || formattedValue && formattedValue[1] || \"\"];\n      } else if (userInput.value !== null) {\n        return userInput.value;\n      }\n\n      if (!isTimePicker.value && valueIsEmpty.value) return;\n      if (!pickerVisible.value && valueIsEmpty.value) return;\n\n      if (formattedValue) {\n        return isDatesPicker.value ? formattedValue.join(\", \") : formattedValue;\n      }\n\n      return \"\";\n    });\n    const isTimeLikePicker = computed(() => props.type.includes(\"time\"));\n    const isTimePicker = computed(() => props.type.startsWith(\"time\"));\n    const isDatesPicker = computed(() => props.type === \"dates\");\n    const triggerIcon = computed(() => props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar));\n    const showClose = ref(false);\n\n    const onClearIconClick = event => {\n      if (props.readonly || pickerDisabled.value) return;\n\n      if (showClose.value) {\n        event.stopPropagation();\n        focus(true, true);\n        emitInput(null);\n        emitChange(null, true);\n        showClose.value = false;\n        pickerVisible.value = false;\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear();\n      }\n    };\n\n    const valueIsEmpty = computed(() => {\n      return !props.modelValue || Array.isArray(props.modelValue) && !props.modelValue.length;\n    });\n\n    const onMouseDownInput = () => {\n      pickerVisible.value = true;\n    };\n\n    const onMouseEnter = () => {\n      if (props.readonly || pickerDisabled.value) return;\n\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true;\n      }\n    };\n\n    const onMouseLeave = () => {\n      showClose.value = false;\n    };\n\n    const onTouchStartInput = () => {\n      pickerVisible.value = true;\n    };\n\n    const isRangeInput = computed(() => {\n      return props.type.includes(\"range\");\n    });\n    const pickerSize = useSize();\n    const popperPaneRef = computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = refPopper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const popperEl = computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = unref(refPopper)) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const actualInputRef = computed(() => {\n      var _a;\n\n      if (unref(isRangeInput)) {\n        return unref(inputRef);\n      }\n\n      return (_a = unref(inputRef)) == null ? void 0 : _a.$el;\n    });\n    onClickOutside(actualInputRef, e => {\n      const unrefedPopperEl = unref(popperEl);\n      const inputEl = unref(actualInputRef);\n      if (unrefedPopperEl && (e.target === unrefedPopperEl || e.composedPath().includes(unrefedPopperEl)) || e.target === inputEl || e.composedPath().includes(inputEl)) return;\n      pickerVisible.value = false;\n    });\n    const userInput = ref(null);\n\n    const handleChange = () => {\n      if (userInput.value) {\n        const value = parseUserInputToDayjs(displayValue.value);\n\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(Array.isArray(value) ? value.map(_ => _.toDate()) : value.toDate());\n            userInput.value = null;\n          }\n        }\n      }\n\n      if (userInput.value === \"\") {\n        emitInput(null);\n        emitChange(null);\n        userInput.value = null;\n      }\n    };\n\n    const parseUserInputToDayjs = value => {\n      if (!value) return null;\n      return pickerOptions.value.parseUserInput(value);\n    };\n\n    const formatDayjsToString = value => {\n      if (!value) return null;\n      return pickerOptions.value.formatToString(value);\n    };\n\n    const isValidValue = value => {\n      return pickerOptions.value.isValidValue(value);\n    };\n\n    const handleKeydownInput = async event => {\n      const code = event.code;\n      emitKeydown(event);\n\n      if (code === EVENT_CODE.esc) {\n        if (pickerVisible.value === true) {\n          pickerVisible.value = false;\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        return;\n      }\n\n      if (code === EVENT_CODE.down) {\n        if (pickerOptions.value.handleFocusPicker) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        if (pickerVisible.value === false) {\n          pickerVisible.value = true;\n          await nextTick();\n        }\n\n        if (pickerOptions.value.handleFocusPicker) {\n          pickerOptions.value.handleFocusPicker();\n          return;\n        }\n      }\n\n      if (code === EVENT_CODE.tab) {\n        hasJustTabExitedInput = true;\n        return;\n      }\n\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {\n        if (userInput.value === null || userInput.value === \"\" || isValidValue(parseUserInputToDayjs(displayValue.value))) {\n          handleChange();\n          pickerVisible.value = false;\n        }\n\n        event.stopPropagation();\n        return;\n      }\n\n      if (userInput.value) {\n        event.stopPropagation();\n        return;\n      }\n\n      if (pickerOptions.value.handleKeydownInput) {\n        pickerOptions.value.handleKeydownInput(event);\n      }\n    };\n\n    const onUserInput = e => {\n      userInput.value = e;\n    };\n\n    const handleStartInput = event => {\n      if (userInput.value) {\n        userInput.value = [event.target.value, userInput.value[1]];\n      } else {\n        userInput.value = [event.target.value, null];\n      }\n    };\n\n    const handleEndInput = event => {\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], event.target.value];\n      } else {\n        userInput.value = [null, event.target.value];\n      }\n    };\n\n    const handleStartChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[0]);\n\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), displayValue.value[1]];\n        const newValue = [value, parsedValue.value && parsedValue.value[1]];\n\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n\n    const handleEndChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[1]);\n\n      if (value && value.isValid()) {\n        userInput.value = [displayValue.value[0], formatDayjsToString(value)];\n        const newValue = [parsedValue.value && parsedValue.value[0], value];\n\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n\n    const pickerOptions = ref({});\n\n    const onSetPickerOption = e => {\n      pickerOptions.value[e[0]] = e[1];\n      pickerOptions.value.panelReady = true;\n    };\n\n    const onCalendarChange = e => {\n      ctx.emit(\"calendar-change\", e);\n    };\n\n    const onPanelChange = (value, mode, view) => {\n      ctx.emit(\"panel-change\", value, mode, view);\n    };\n\n    provide(\"EP_PICKER_BASE\", {\n      props\n    });\n    return {\n      nsDate,\n      nsInput,\n      nsRange,\n      elPopperOptions,\n      isDatesPicker,\n      handleEndChange,\n      handleStartChange,\n      handleStartInput,\n      handleEndInput,\n      onUserInput,\n      handleChange,\n      handleKeydownInput,\n      popperPaneRef,\n      onClickOutside,\n      pickerSize,\n      isRangeInput,\n      onMouseDownInput,\n      onMouseLeave,\n      onMouseEnter,\n      onTouchStartInput,\n      onClearIconClick,\n      showClose,\n      triggerIcon,\n      onPick,\n      handleFocusInput,\n      handleBlurInput,\n      pickerVisible,\n      pickerActualVisible,\n      displayValue,\n      parsedValue,\n      setSelectionRange,\n      refPopper,\n      inputRef,\n      pickerDisabled,\n      onSetPickerOption,\n      onCalendarChange,\n      onPanelChange,\n      focus,\n      onShow,\n      onBeforeShow,\n      onHide,\n      onKeydownPopperContent\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nconst _hoisted_2 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createBlock(_component_el_tooltip, mergeProps({\n    ref: \"refPopper\",\n    visible: _ctx.pickerVisible,\n    \"onUpdate:visible\": _cache[22] || (_cache[22] = $event => _ctx.pickerVisible = $event),\n    effect: \"light\",\n    pure: \"\",\n    trigger: \"click\"\n  }, _ctx.$attrs, {\n    role: \"dialog\",\n    teleported: \"\",\n    transition: `${_ctx.nsDate.namespace.value}-zoom-in-top`,\n    \"popper-class\": [`${_ctx.nsDate.namespace.value}-picker__popper`, _ctx.popperClass],\n    \"popper-options\": _ctx.elPopperOptions,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    \"gpu-acceleration\": false,\n    \"stop-popper-mouse-event\": false,\n    \"hide-after\": 0,\n    persistent: \"\",\n    onBeforeShow: _ctx.onBeforeShow,\n    onShow: _ctx.onShow,\n    onHide: _ctx.onHide\n  }), {\n    default: withCtx(() => [!_ctx.isRangeInput ? (openBlock(), createBlock(_component_el_input, {\n      key: 0,\n      id: _ctx.id,\n      ref: \"inputRef\",\n      \"container-role\": \"combobox\",\n      \"model-value\": _ctx.displayValue,\n      name: _ctx.name,\n      size: _ctx.pickerSize,\n      disabled: _ctx.pickerDisabled,\n      placeholder: _ctx.placeholder,\n      class: normalizeClass([_ctx.nsDate.b(\"editor\"), _ctx.nsDate.bm(\"editor\", _ctx.type), _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      readonly: !_ctx.editable || _ctx.readonly || _ctx.isDatesPicker || _ctx.type === \"week\",\n      label: _ctx.label,\n      tabindex: _ctx.tabindex,\n      onInput: _ctx.onUserInput,\n      onFocus: _ctx.handleFocusInput,\n      onBlur: _ctx.handleBlurInput,\n      onKeydown: _ctx.handleKeydownInput,\n      onChange: _ctx.handleChange,\n      onMousedown: _ctx.onMouseDownInput,\n      onMouseenter: _ctx.onMouseEnter,\n      onMouseleave: _ctx.onMouseLeave,\n      onTouchstart: _ctx.onTouchStartInput,\n      onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n    }, {\n      prefix: withCtx(() => [_ctx.triggerIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass(_ctx.nsInput.e(\"icon\")),\n        onMousedown: _ctx.onMouseDownInput,\n        onTouchstart: _ctx.onTouchStartInput\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.triggerIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onMousedown\", \"onTouchstart\"])) : createCommentVNode(\"v-if\", true)]),\n      suffix: withCtx(() => [_ctx.showClose && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass(`${_ctx.nsInput.e(\"icon\")} clear-icon`),\n        onClick: _ctx.onClearIconClick\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 1\n    }, 8, [\"id\", \"model-value\", \"name\", \"size\", \"disabled\", \"placeholder\", \"class\", \"style\", \"readonly\", \"label\", \"tabindex\", \"onInput\", \"onFocus\", \"onBlur\", \"onKeydown\", \"onChange\", \"onMousedown\", \"onMouseenter\", \"onMouseleave\", \"onTouchstart\"])) : (openBlock(), createElementBlock(\"div\", {\n      key: 1,\n      ref: \"inputRef\",\n      class: normalizeClass([_ctx.nsDate.b(\"editor\"), _ctx.nsDate.bm(\"editor\", _ctx.type), _ctx.nsInput.e(\"wrapper\"), _ctx.nsDate.is(\"disabled\", _ctx.pickerDisabled), _ctx.nsDate.is(\"active\", _ctx.pickerVisible), _ctx.nsRange.b(\"editor\"), _ctx.pickerSize ? _ctx.nsRange.bm(\"editor\", _ctx.pickerSize) : \"\", _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      onClick: _cache[9] || (_cache[9] = (...args) => _ctx.handleFocusInput && _ctx.handleFocusInput(...args)),\n      onMousedown: _cache[10] || (_cache[10] = (...args) => _ctx.onMouseDownInput && _ctx.onMouseDownInput(...args)),\n      onMouseenter: _cache[11] || (_cache[11] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n      onMouseleave: _cache[12] || (_cache[12] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args)),\n      onTouchstart: _cache[13] || (_cache[13] = (...args) => _ctx.onTouchStartInput && _ctx.onTouchStartInput(...args)),\n      onKeydown: _cache[14] || (_cache[14] = (...args) => _ctx.handleKeydownInput && _ctx.handleKeydownInput(...args))\n    }, [_ctx.triggerIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsRange.e(\"icon\")]),\n      onMousedown: _ctx.onMouseDownInput,\n      onTouchstart: _ctx.onTouchStartInput\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.triggerIcon)))]),\n      _: 1\n    }, 8, [\"class\", \"onMousedown\", \"onTouchstart\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", {\n      id: _ctx.id && _ctx.id[0],\n      autocomplete: \"off\",\n      name: _ctx.name && _ctx.name[0],\n      placeholder: _ctx.startPlaceholder,\n      value: _ctx.displayValue && _ctx.displayValue[0],\n      disabled: _ctx.pickerDisabled,\n      readonly: !_ctx.editable || _ctx.readonly,\n      class: normalizeClass(_ctx.nsRange.b(\"input\")),\n      onInput: _cache[1] || (_cache[1] = (...args) => _ctx.handleStartInput && _ctx.handleStartInput(...args)),\n      onChange: _cache[2] || (_cache[2] = (...args) => _ctx.handleStartChange && _ctx.handleStartChange(...args)),\n      onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.handleFocusInput && _ctx.handleFocusInput(...args)),\n      onBlur: _cache[4] || (_cache[4] = (...args) => _ctx.handleBlurInput && _ctx.handleBlurInput(...args))\n    }, null, 42, _hoisted_1), renderSlot(_ctx.$slots, \"range-separator\", {}, () => [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.nsRange.b(\"separator\"))\n    }, toDisplayString(_ctx.rangeSeparator), 3)]), createElementVNode(\"input\", {\n      id: _ctx.id && _ctx.id[1],\n      autocomplete: \"off\",\n      name: _ctx.name && _ctx.name[1],\n      placeholder: _ctx.endPlaceholder,\n      value: _ctx.displayValue && _ctx.displayValue[1],\n      disabled: _ctx.pickerDisabled,\n      readonly: !_ctx.editable || _ctx.readonly,\n      class: normalizeClass(_ctx.nsRange.b(\"input\")),\n      onFocus: _cache[5] || (_cache[5] = (...args) => _ctx.handleFocusInput && _ctx.handleFocusInput(...args)),\n      onBlur: _cache[6] || (_cache[6] = (...args) => _ctx.handleBlurInput && _ctx.handleBlurInput(...args)),\n      onInput: _cache[7] || (_cache[7] = (...args) => _ctx.handleEndInput && _ctx.handleEndInput(...args)),\n      onChange: _cache[8] || (_cache[8] = (...args) => _ctx.handleEndChange && _ctx.handleEndChange(...args))\n    }, null, 42, _hoisted_2), _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 1,\n      class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsRange.e(\"close-icon\"), {\n        [_ctx.nsRange.e(\"close-icon--hidden\")]: !_ctx.showClose\n      }]),\n      onClick: _ctx.onClearIconClick\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 38))]),\n    content: withCtx(() => [renderSlot(_ctx.$slots, \"default\", {\n      visible: _ctx.pickerVisible,\n      actualVisible: _ctx.pickerActualVisible,\n      parsedValue: _ctx.parsedValue,\n      format: _ctx.format,\n      unlinkPanels: _ctx.unlinkPanels,\n      type: _ctx.type,\n      defaultValue: _ctx.defaultValue,\n      onPick: _cache[15] || (_cache[15] = (...args) => _ctx.onPick && _ctx.onPick(...args)),\n      onSelectRange: _cache[16] || (_cache[16] = (...args) => _ctx.setSelectionRange && _ctx.setSelectionRange(...args)),\n      onSetPickerOption: _cache[17] || (_cache[17] = (...args) => _ctx.onSetPickerOption && _ctx.onSetPickerOption(...args)),\n      onCalendarChange: _cache[18] || (_cache[18] = (...args) => _ctx.onCalendarChange && _ctx.onCalendarChange(...args)),\n      onPanelChange: _cache[19] || (_cache[19] = (...args) => _ctx.onPanelChange && _ctx.onPanelChange(...args)),\n      onKeydown: _cache[20] || (_cache[20] = (...args) => _ctx.onKeydownPopperContent && _ctx.onKeydownPopperContent(...args)),\n      onMousedown: _cache[21] || (_cache[21] = withModifiers(() => {}, [\"stop\"]))\n    })]),\n    _: 3\n  }, 16, [\"visible\", \"transition\", \"popper-class\", \"popper-options\", \"onBeforeShow\", \"onShow\", \"onHide\"]);\n}\n\nvar CommonPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue\"]]);\n\nexport { CommonPicker as default };","map":{"version":3,"mappings":"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","names":["dateEquals","a","b","aIsDate","bIsDate","getTime","valueEquals","Array","aIsArray","bIsArray","length","every","item","index","parser","date","format","lang","day","isEmpty","dayjs","locale","isValid","formatter","_sfc_main","defineComponent","name","components","ElInput","ElTooltip","ElIcon","props","emits","setup","ctx","useLocale","useNamespace","elForm","formContextKey","elFormItem","formItemContextKey","elPopperOptions","refPopper","ref","inputRef","hasJustTabExitedInput","ignoreFocusEvent","watch","val","userInput","value","nextTick","emitChange","modelValue","valueOnOpen","isClear","_a","emitInput","formatValue","refInput","computed","_inputs","setSelectionRange","start","end","focus","onPick","pickerVisible","result","pickerActualVisible","event","EVENT_CODE","isRangeInput","input","handleFocusInput","setTimeout","_b","handleBlurDefer","handleChange","currentHandleBlurDeferCallback","pickerDisabled","parsedValue","map","_","valueFormat","getRangeAvailableTime","availableResult","panelReady","formattedValue","isTimePicker","valueIsEmpty","isTimeLikePicker","startsWith","showClose","pickerOptions","includes","useSize","popperPaneRef","onClickOutside","e","unref","parseUserInput","formatToString","isValidValue","emitKeydown","preventDefault","stopPropagation","handleKeydownInput","handleEndInput","newValue","onSetPickerOption","provide","nsDate","nsInput","nsRange","isDatesPicker","handleEndChange","handleStartChange","handleStartInput","onUserInput","pickerSize","onMouseDownInput","onMouseLeave","onMouseEnter","onTouchStartInput","onClearIconClick","triggerIcon","handleBlurInput","displayValue","onCalendarChange","onPanelChange","_hoisted_1","_hoisted_2","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_el_icon","_component_el_tooltip","_openBlock","visible","effect","pure","trigger","role","teleported","transition","persistent","onShow","onHide","default","key","id","size","disabled","placeholder","class","style","readonly","label","tabindex","onInput","onFocus","onBlur","onKeydown","onChange","onMousedown","onMouseenter","onMouseleave","onClick","createBlock","_withCtx","_createCommentVNode","suffix","is","onTouchstart","_createElementVNode","autocomplete","args","_renderSlot","_toDisplayString","content","actualVisible","unlinkPanels","type","defaultValue","onSelectRange"],"sources":["../../../../../../../packages/components/time-picker/src/common/picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"refPopper\"\n    v-model:visible=\"pickerVisible\"\n    effect=\"light\"\n    pure\n    trigger=\"click\"\n    v-bind=\"$attrs\"\n    role=\"dialog\"\n    teleported\n    :transition=\"`${nsDate.namespace.value}-zoom-in-top`\"\n    :popper-class=\"[`${nsDate.namespace.value}-picker__popper`, popperClass]\"\n    :popper-options=\"elPopperOptions\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :gpu-acceleration=\"false\"\n    :stop-popper-mouse-event=\"false\"\n    :hide-after=\"0\"\n    persistent\n    @before-show=\"onBeforeShow\"\n    @show=\"onShow\"\n    @hide=\"onHide\"\n  >\n    <template #default>\n      <el-input\n        v-if=\"!isRangeInput\"\n        :id=\"id\"\n        ref=\"inputRef\"\n        container-role=\"combobox\"\n        :model-value=\"displayValue\"\n        :name=\"name\"\n        :size=\"pickerSize\"\n        :disabled=\"pickerDisabled\"\n        :placeholder=\"placeholder\"\n        :class=\"[nsDate.b('editor'), nsDate.bm('editor', type), $attrs.class]\"\n        :style=\"$attrs.style\"\n        :readonly=\"!editable || readonly || isDatesPicker || type === 'week'\"\n        :label=\"label\"\n        :tabindex=\"tabindex\"\n        @input=\"onUserInput\"\n        @focus=\"handleFocusInput\"\n        @blur=\"handleBlurInput\"\n        @keydown=\"handleKeydownInput\"\n        @change=\"handleChange\"\n        @mousedown=\"onMouseDownInput\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @touchstart=\"onTouchStartInput\"\n        @click.stop\n      >\n        <template #prefix>\n          <el-icon\n            v-if=\"triggerIcon\"\n            :class=\"nsInput.e('icon')\"\n            @mousedown=\"onMouseDownInput\"\n            @touchstart=\"onTouchStartInput\"\n          >\n            <component :is=\"triggerIcon\" />\n          </el-icon>\n        </template>\n        <template #suffix>\n          <el-icon\n            v-if=\"showClose && clearIcon\"\n            :class=\"`${nsInput.e('icon')} clear-icon`\"\n            @click=\"onClearIconClick\"\n          >\n            <component :is=\"clearIcon\" />\n          </el-icon>\n        </template>\n      </el-input>\n      <div\n        v-else\n        ref=\"inputRef\"\n        :class=\"[\n          nsDate.b('editor'),\n          nsDate.bm('editor', type),\n          nsInput.e('wrapper'),\n          nsDate.is('disabled', pickerDisabled),\n          nsDate.is('active', pickerVisible),\n          nsRange.b('editor'),\n          pickerSize ? nsRange.bm('editor', pickerSize) : '',\n          $attrs.class,\n        ]\"\n        :style=\"$attrs.style\"\n        @click=\"handleFocusInput\"\n        @mousedown=\"onMouseDownInput\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @touchstart=\"onTouchStartInput\"\n        @keydown=\"handleKeydownInput\"\n      >\n        <el-icon\n          v-if=\"triggerIcon\"\n          :class=\"[nsInput.e('icon'), nsRange.e('icon')]\"\n          @mousedown=\"onMouseDownInput\"\n          @touchstart=\"onTouchStartInput\"\n        >\n          <component :is=\"triggerIcon\" />\n        </el-icon>\n        <input\n          :id=\"id && id[0]\"\n          autocomplete=\"off\"\n          :name=\"name && name[0]\"\n          :placeholder=\"startPlaceholder\"\n          :value=\"displayValue && displayValue[0]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          :class=\"nsRange.b('input')\"\n          @input=\"handleStartInput\"\n          @change=\"handleStartChange\"\n          @focus=\"handleFocusInput\"\n          @blur=\"handleBlurInput\"\n        />\n        <slot name=\"range-separator\">\n          <span :class=\"nsRange.b('separator')\">{{ rangeSeparator }}</span>\n        </slot>\n        <input\n          :id=\"id && id[1]\"\n          autocomplete=\"off\"\n          :name=\"name && name[1]\"\n          :placeholder=\"endPlaceholder\"\n          :value=\"displayValue && displayValue[1]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          :class=\"nsRange.b('input')\"\n          @focus=\"handleFocusInput\"\n          @blur=\"handleBlurInput\"\n          @input=\"handleEndInput\"\n          @change=\"handleEndChange\"\n        />\n        <el-icon\n          v-if=\"clearIcon\"\n          :class=\"[\n            nsInput.e('icon'),\n            nsRange.e('close-icon'),\n            {\n              [nsRange.e('close-icon--hidden')]: !showClose,\n            },\n          ]\"\n          @click=\"onClearIconClick\"\n        >\n          <component :is=\"clearIcon\" />\n        </el-icon>\n      </div>\n    </template>\n    <template #content>\n      <slot\n        :visible=\"pickerVisible\"\n        :actual-visible=\"pickerActualVisible\"\n        :parsed-value=\"parsedValue\"\n        :format=\"format\"\n        :unlink-panels=\"unlinkPanels\"\n        :type=\"type\"\n        :default-value=\"defaultValue\"\n        @pick=\"onPick\"\n        @select-range=\"setSelectionRange\"\n        @set-picker-option=\"onSetPickerOption\"\n        @calendar-change=\"onCalendarChange\"\n        @panel-change=\"onPanelChange\"\n        @keydown=\"onKeydownPopperContent\"\n        @mousedown.stop\n      />\n    </template>\n  </el-tooltip>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport dayjs from 'dayjs'\nimport { isEqual } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport { useLocale, useNamespace, useSize } from '@element-plus/hooks'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport ElInput from '@element-plus/components/input'\nimport ElIcon from '@element-plus/components/icon'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { debugWarn, isEmpty } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { Calendar, Clock } from '@element-plus/icons-vue'\nimport { timePickerDefaultProps } from './props'\n\nimport type { Dayjs } from 'dayjs'\nimport type { ComponentPublicInstance } from 'vue'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { Options } from '@popperjs/core'\n\ninterface PickerOptions {\n  isValidValue: (date: Dayjs) => boolean\n  handleKeydownInput: (event: KeyboardEvent) => void\n  parseUserInput: (value: Dayjs) => dayjs.Dayjs\n  formatToString: (value: Dayjs) => string | string[]\n  getRangeAvailableTime: (date: Dayjs) => dayjs.Dayjs\n  getDefaultValue: () => Dayjs\n  panelReady: boolean\n  handleClear: () => void\n  handleFocusPicker?: () => void\n}\n\n// Date object and string\nconst dateEquals = function (a: Date | any, b: Date | any) {\n  const aIsDate = a instanceof Date\n  const bIsDate = b instanceof Date\n  if (aIsDate && bIsDate) {\n    return a.getTime() === b.getTime()\n  }\n  if (!aIsDate && !bIsDate) {\n    return a === b\n  }\n  return false\n}\n\nconst valueEquals = function (a: Array<Date> | any, b: Array<Date> | any) {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false\n    }\n    return (a as Array<Date>).every((item, index) => dateEquals(item, b[index]))\n  }\n  if (!aIsArray && !bIsArray) {\n    return dateEquals(a, b)\n  }\n  return false\n}\n\nconst parser = function (\n  date: string | number | Date,\n  format: string,\n  lang: string\n): Dayjs {\n  const day =\n    isEmpty(format) || format === 'x'\n      ? dayjs(date).locale(lang)\n      : dayjs(date, format).locale(lang)\n  return day.isValid() ? day : undefined\n}\n\nconst formatter = function (\n  date: string | number | Date,\n  format: string,\n  lang: string\n) {\n  if (isEmpty(format)) return date\n  if (format === 'x') return +date\n  return dayjs(date).locale(lang).format(format)\n}\n\nexport default defineComponent({\n  name: 'Picker',\n  components: {\n    ElInput,\n    ElTooltip,\n    ElIcon,\n  },\n  props: timePickerDefaultProps,\n  emits: [\n    'update:modelValue',\n    'change',\n    'focus',\n    'blur',\n    'calendar-change',\n    'panel-change',\n    'visible-change',\n    'keydown',\n  ],\n  setup(props, ctx) {\n    const { lang } = useLocale()\n\n    const nsDate = useNamespace('date')\n    const nsInput = useNamespace('input')\n    const nsRange = useNamespace('range')\n\n    const elForm = inject(formContextKey, {} as FormContext)\n    const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n    const elPopperOptions = inject('ElPopperOptions', {} as Options)\n\n    const refPopper = ref<InstanceType<typeof ElTooltip>>()\n    const inputRef = ref<HTMLElement | ComponentPublicInstance>()\n    const pickerVisible = ref(false)\n    const pickerActualVisible = ref(false)\n    const valueOnOpen = ref(null)\n\n    let hasJustTabExitedInput = false\n    let ignoreFocusEvent = false\n\n    watch(pickerVisible, (val) => {\n      if (!val) {\n        userInput.value = null\n        nextTick(() => {\n          emitChange(props.modelValue)\n        })\n      } else {\n        valueOnOpen.value = props.modelValue\n      }\n    })\n    const emitChange = (val, isClear?: boolean) => {\n      // determine user real change only\n      if (isClear || !valueEquals(val, valueOnOpen.value)) {\n        ctx.emit('change', val)\n        props.validateEvent &&\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    }\n    const emitInput = (val) => {\n      if (!valueEquals(props.modelValue, val)) {\n        let formatValue\n        if (Array.isArray(val)) {\n          formatValue = val.map((_) =>\n            formatter(_, props.valueFormat, lang.value)\n          )\n        } else if (val) {\n          formatValue = formatter(val, props.valueFormat, lang.value)\n        }\n        ctx.emit('update:modelValue', val ? formatValue : val, lang.value)\n      }\n    }\n    const emitKeydown = (e) => {\n      ctx.emit('keydown', e)\n    }\n    const refInput = computed<HTMLInputElement[]>(() => {\n      if (inputRef.value) {\n        const _r = isRangeInput.value\n          ? inputRef.value\n          : (inputRef.value as any as ComponentPublicInstance).$el\n        return Array.from<HTMLInputElement>(_r.querySelectorAll('input'))\n      }\n      return []\n    })\n    const refStartInput = computed(() => {\n      return refInput?.value[0]\n    })\n    const refEndInput = computed(() => {\n      return refInput?.value[1]\n    })\n\n    const setSelectionRange = (start, end, pos) => {\n      const _inputs = refInput.value\n      if (!_inputs.length) return\n      if (!pos || pos === 'min') {\n        _inputs[0].setSelectionRange(start, end)\n        _inputs[0].focus()\n      } else if (pos === 'max') {\n        _inputs[1].setSelectionRange(start, end)\n        _inputs[1].focus()\n      }\n    }\n\n    const onPick = (date: any = '', visible = false) => {\n      if (!visible) {\n        focus(true, true)\n      }\n      pickerVisible.value = visible\n      let result\n      if (Array.isArray(date)) {\n        result = date.map((_) => _.toDate())\n      } else {\n        // clear btn emit null\n        result = date ? date.toDate() : date\n      }\n      userInput.value = null\n      emitInput(result)\n    }\n\n    const onBeforeShow = () => {\n      pickerActualVisible.value = true\n    }\n\n    const onShow = () => {\n      ctx.emit('visible-change', true)\n    }\n\n    const onKeydownPopperContent = (event: KeyboardEvent) => {\n      if ((event as KeyboardEvent)?.key === EVENT_CODE.esc) {\n        focus(true, true)\n      }\n    }\n\n    const onHide = () => {\n      pickerActualVisible.value = false\n      ignoreFocusEvent = false\n      ctx.emit('visible-change', false)\n    }\n\n    const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {\n      ignoreFocusEvent = isIgnoreFocusEvent\n      let input = refStartInput.value\n      if (!focusStartInput && isRangeInput.value) {\n        input = refEndInput.value\n      }\n      if (input) {\n        input.focus()\n      }\n    }\n\n    const handleFocusInput = (e) => {\n      if (\n        props.readonly ||\n        pickerDisabled.value ||\n        pickerVisible.value ||\n        ignoreFocusEvent\n      ) {\n        return\n      }\n      pickerVisible.value = true\n      ctx.emit('focus', e)\n    }\n\n    let currentHandleBlurDeferCallback: () => void | undefined\n\n    // Check if document.activeElement is inside popper or any input before popper close\n    const handleBlurInput = (e) => {\n      const handleBlurDefer = async () => {\n        setTimeout(() => {\n          if (currentHandleBlurDeferCallback === handleBlurDefer) {\n            if (\n              !(\n                refPopper.value?.isFocusInsideContent() &&\n                !hasJustTabExitedInput\n              ) &&\n              refInput.value.filter((input) => {\n                return input.contains(document.activeElement)\n              }).length === 0\n            ) {\n              handleChange()\n              pickerVisible.value = false\n              ctx.emit('blur', e)\n              props.validateEvent &&\n                elFormItem.validate?.('blur').catch((err) => debugWarn(err))\n            }\n            hasJustTabExitedInput = false\n          }\n        }, 0)\n      }\n      currentHandleBlurDeferCallback = handleBlurDefer\n      handleBlurDefer()\n    }\n\n    const pickerDisabled = computed(() => {\n      return props.disabled || elForm.disabled\n    })\n\n    const parsedValue = computed(() => {\n      let result\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          result = pickerOptions.value.getDefaultValue()\n        }\n      } else {\n        if (Array.isArray(props.modelValue)) {\n          result = props.modelValue.map((_) =>\n            parser(_, props.valueFormat, lang.value)\n          )\n        } else {\n          result = parser(props.modelValue, props.valueFormat, lang.value)\n        }\n      }\n\n      if (pickerOptions.value.getRangeAvailableTime) {\n        const availableResult =\n          pickerOptions.value.getRangeAvailableTime(result)\n        if (!isEqual(availableResult, result)) {\n          result = availableResult\n          emitInput(\n            Array.isArray(result)\n              ? result.map((_) => _.toDate())\n              : result.toDate()\n          )\n        }\n      }\n      if (Array.isArray(result) && result.some((_) => !_)) {\n        result = []\n      }\n      return result\n    })\n\n    const displayValue = computed(() => {\n      if (!pickerOptions.value.panelReady) return\n      const formattedValue = formatDayjsToString(parsedValue.value)\n      if (Array.isArray(userInput.value)) {\n        return [\n          userInput.value[0] || (formattedValue && formattedValue[0]) || '',\n          userInput.value[1] || (formattedValue && formattedValue[1]) || '',\n        ]\n      } else if (userInput.value !== null) {\n        return userInput.value\n      }\n      if (!isTimePicker.value && valueIsEmpty.value) return\n      if (!pickerVisible.value && valueIsEmpty.value) return\n      if (formattedValue) {\n        return isDatesPicker.value\n          ? (formattedValue as Array<string>).join(', ')\n          : formattedValue\n      }\n      return ''\n    })\n\n    const isTimeLikePicker = computed(() => props.type.includes('time'))\n\n    const isTimePicker = computed(() => props.type.startsWith('time'))\n\n    const isDatesPicker = computed(() => props.type === 'dates')\n\n    const triggerIcon = computed(\n      () => props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar)\n    )\n\n    const showClose = ref(false)\n\n    const onClearIconClick = (event) => {\n      if (props.readonly || pickerDisabled.value) return\n      if (showClose.value) {\n        event.stopPropagation()\n        focus(true, true)\n        emitInput(null)\n        emitChange(null, true)\n        showClose.value = false\n        pickerVisible.value = false\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear()\n      }\n    }\n    const valueIsEmpty = computed(() => {\n      return (\n        !props.modelValue ||\n        (Array.isArray(props.modelValue) && !props.modelValue.length)\n      )\n    })\n    const onMouseDownInput = () => {\n      pickerVisible.value = true\n    }\n    const onMouseEnter = () => {\n      if (props.readonly || pickerDisabled.value) return\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true\n      }\n    }\n    const onMouseLeave = () => {\n      showClose.value = false\n    }\n    const onTouchStartInput = () => {\n      pickerVisible.value = true\n    }\n    const isRangeInput = computed(() => {\n      return props.type.includes('range')\n    })\n\n    const pickerSize = useSize()\n\n    const popperPaneRef = computed(() => {\n      return refPopper.value?.popperRef?.contentRef\n    })\n\n    const popperEl = computed(() => unref(refPopper)?.popperRef?.contentRef)\n    const actualInputRef = computed(() => {\n      if (unref(isRangeInput)) {\n        return unref(inputRef)\n      }\n\n      return (unref(inputRef) as ComponentPublicInstance)?.$el\n    })\n\n    onClickOutside(actualInputRef, (e: PointerEvent) => {\n      const unrefedPopperEl = unref(popperEl)\n      const inputEl = unref(actualInputRef)\n      if (\n        (unrefedPopperEl &&\n          (e.target === unrefedPopperEl ||\n            e.composedPath().includes(unrefedPopperEl))) ||\n        e.target === inputEl ||\n        e.composedPath().includes(inputEl)\n      )\n        return\n      pickerVisible.value = false\n    })\n\n    const userInput = ref(null)\n\n    const handleChange = () => {\n      if (userInput.value) {\n        const value = parseUserInputToDayjs(displayValue.value)\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(\n              Array.isArray(value)\n                ? value.map((_) => _.toDate())\n                : value.toDate()\n            )\n            userInput.value = null\n          }\n        }\n      }\n      if (userInput.value === '') {\n        emitInput(null)\n        emitChange(null)\n        userInput.value = null\n      }\n    }\n\n    const parseUserInputToDayjs = (value) => {\n      if (!value) return null\n      return pickerOptions.value.parseUserInput(value)\n    }\n\n    const formatDayjsToString = (value) => {\n      if (!value) return null\n      return pickerOptions.value.formatToString(value)\n    }\n\n    const isValidValue = (value) => {\n      return pickerOptions.value.isValidValue(value)\n    }\n\n    const handleKeydownInput = async (event) => {\n      const code = event.code\n      emitKeydown(event)\n      if (code === EVENT_CODE.esc) {\n        if (pickerVisible.value === true) {\n          pickerVisible.value = false\n          event.preventDefault()\n          event.stopPropagation()\n        }\n        return\n      }\n\n      if (code === EVENT_CODE.down) {\n        if (pickerOptions.value.handleFocusPicker) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n        if (pickerVisible.value === false) {\n          pickerVisible.value = true\n          await nextTick()\n        }\n        if (pickerOptions.value.handleFocusPicker) {\n          pickerOptions.value.handleFocusPicker()\n          return\n        }\n      }\n\n      if (code === EVENT_CODE.tab) {\n        hasJustTabExitedInput = true\n        return\n      }\n\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {\n        if (\n          userInput.value === null ||\n          userInput.value === '' ||\n          isValidValue(parseUserInputToDayjs(displayValue.value))\n        ) {\n          handleChange()\n          pickerVisible.value = false\n        }\n        event.stopPropagation()\n        return\n      }\n\n      // if user is typing, do not let picker handle key input\n      if (userInput.value) {\n        event.stopPropagation()\n        return\n      }\n      if (pickerOptions.value.handleKeydownInput) {\n        pickerOptions.value.handleKeydownInput(event)\n      }\n    }\n    const onUserInput = (e) => {\n      userInput.value = e\n    }\n\n    const handleStartInput = (event) => {\n      if (userInput.value) {\n        userInput.value = [event.target.value, userInput.value[1]]\n      } else {\n        userInput.value = [event.target.value, null]\n      }\n    }\n\n    const handleEndInput = (event) => {\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], event.target.value]\n      } else {\n        userInput.value = [null, event.target.value]\n      }\n    }\n\n    const handleStartChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[0])\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), displayValue.value[1]]\n        const newValue = [value, parsedValue.value && parsedValue.value[1]]\n        if (isValidValue(newValue)) {\n          emitInput(newValue)\n          userInput.value = null\n        }\n      }\n    }\n\n    const handleEndChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[1])\n      if (value && value.isValid()) {\n        userInput.value = [displayValue.value[0], formatDayjsToString(value)]\n        const newValue = [parsedValue.value && parsedValue.value[0], value]\n        if (isValidValue(newValue)) {\n          emitInput(newValue)\n          userInput.value = null\n        }\n      }\n    }\n\n    const pickerOptions = ref<Partial<PickerOptions>>({})\n    const onSetPickerOption = <T extends keyof PickerOptions>(\n      e: [T, PickerOptions[T]]\n    ) => {\n      pickerOptions.value[e[0]] = e[1]\n      pickerOptions.value.panelReady = true\n    }\n\n    const onCalendarChange = (e) => {\n      ctx.emit('calendar-change', e)\n    }\n\n    const onPanelChange = (value, mode, view) => {\n      ctx.emit('panel-change', value, mode, view)\n    }\n\n    provide('EP_PICKER_BASE', {\n      props,\n    })\n\n    return {\n      nsDate,\n      nsInput,\n      nsRange,\n      // injected popper options\n      elPopperOptions,\n\n      isDatesPicker,\n      handleEndChange,\n      handleStartChange,\n      handleStartInput,\n      handleEndInput,\n      onUserInput,\n      handleChange,\n      handleKeydownInput,\n      popperPaneRef,\n      onClickOutside,\n      pickerSize,\n      isRangeInput,\n      onMouseDownInput,\n      onMouseLeave,\n      onMouseEnter,\n      onTouchStartInput,\n      onClearIconClick,\n      showClose,\n      triggerIcon,\n      onPick,\n      handleFocusInput,\n      handleBlurInput,\n      pickerVisible,\n      pickerActualVisible,\n      displayValue,\n      parsedValue,\n      setSelectionRange,\n      refPopper,\n      inputRef,\n      pickerDisabled,\n      onSetPickerOption,\n      onCalendarChange,\n      onPanelChange,\n      focus,\n      onShow,\n      onBeforeShow,\n      onHide,\n      onKeydownPopperContent,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}