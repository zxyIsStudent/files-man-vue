{"ast":null,"code":"import { ref, inject, computed } from 'vue';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport '../../../tokens/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { buildProps } from '../../../utils/vue/props2.mjs';\nimport { useSizeProp, useSize, useDisabled } from '../../../hooks/use-common-props/index2.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber, isBoolean } from '@vueuse/core';\nimport { radioGroupKey } from '../../../tokens/radio2.mjs';\nconst radioPropsBase = buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  label: {\n    type: [String, Number, Boolean],\n    default: \"\"\n  }\n});\nconst radioProps = buildProps({ ...radioPropsBase,\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: \"\"\n  },\n  name: {\n    type: String,\n    default: \"\"\n  },\n  border: Boolean\n});\nconst radioEmits = {\n  [UPDATE_MODEL_EVENT]: val => isString(val) || isNumber(val) || isBoolean(val),\n  change: val => isString(val) || isNumber(val) || isBoolean(val)\n};\n\nconst useRadio = (props, emit) => {\n  const radioRef = ref();\n  const radioGroup = inject(radioGroupKey, void 0);\n  const isGroup = computed(() => !!radioGroup);\n  const modelValue = computed({\n    get() {\n      return isGroup.value ? radioGroup.modelValue : props.modelValue;\n    },\n\n    set(val) {\n      if (isGroup.value) {\n        radioGroup.changeEvent(val);\n      } else {\n        emit && emit(UPDATE_MODEL_EVENT, val);\n      }\n\n      radioRef.value.checked = props.modelValue === props.label;\n    }\n\n  });\n  const size = useSize(computed(() => radioGroup == null ? void 0 : radioGroup.size));\n  const disabled = useDisabled(computed(() => radioGroup == null ? void 0 : radioGroup.disabled));\n  const focus = ref(false);\n  const tabIndex = computed(() => {\n    return disabled.value || isGroup.value && modelValue.value !== props.label ? -1 : 0;\n  });\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue\n  };\n};\n\nexport { radioEmits, radioProps, radioPropsBase, useRadio };","map":{"version":3,"mappings":";;;;;;;;;;;AAKY,MAACA,cAAc,GAAGC,UAAU,CAAC;EACvCC,IAAI,EAAEC,WADiC;EAEvCC,QAAQ,EAAEC,OAF6B;EAGvCC,KAAK,EAAE;IACLC,IAAI,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBJ,OAAjB,CADD;IAELK,OAAO,EAAE;EAFJ;AAHgC,CAAD,CAA5B;AAQA,MAACC,UAAU,GAAGV,UAAU,CAAC,EACnC,GAAGD,cADgC;EAEnCY,UAAU,EAAE;IACVL,IAAI,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBJ,OAAjB,CADI;IAEVK,OAAO,EAAE;EAFC,CAFuB;EAMnCG,IAAI,EAAE;IACJN,IAAI,EAAEC,MADF;IAEJE,OAAO,EAAE;EAFL,CAN6B;EAUnCI,MAAM,EAAET;AAV2B,CAAD,CAAxB;AAYA,MAACU,UAAU,GAAG;EACxB,CAACC,kBAAD,GAAuBC,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,QAAQ,CAACF,GAAD,CAAzB,IAAkCG,SAAS,CAACH,GAAD,CADlD;EAExBI,MAAM,EAAGJ,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,QAAQ,CAACF,GAAD,CAAzB,IAAkCG,SAAS,CAACH,GAAD;AAFpC,CAAd;;AAIA,MAACK,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;EACvC,MAAMC,QAAQ,GAAGC,GAAG,EAApB;EACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,aAAD,EAAgB,KAAK,CAArB,CAAzB;EACA,MAAMC,OAAO,GAAGC,QAAQ,CAAC,MAAM,CAAC,CAACJ,UAAT,CAAxB;EACA,MAAMf,UAAU,GAAGmB,QAAQ,CAAC;IAC1BC,GAAG,GAAG;MACJ,OAAOF,OAAO,CAACG,KAAR,GAAgBN,UAAU,CAACf,UAA3B,GAAwCW,KAAK,CAACX,UAArD;IACD,CAHyB;;IAI1BsB,GAAG,CAACjB,GAAD,EAAM;MACP,IAAIa,OAAO,CAACG,KAAZ,EAAmB;QACjBN,UAAU,CAACQ,WAAX,CAAuBlB,GAAvB;MACD,CAFD,MAEO;QACLO,IAAI,IAAIA,IAAI,CAACR,kBAAD,EAAqBC,GAArB,CAAZ;MACD;;MACDQ,QAAQ,CAACQ,KAAT,CAAeG,OAAf,GAAyBb,KAAK,CAACX,UAAN,KAAqBW,KAAK,CAACjB,KAApD;IACD;;EAXyB,CAAD,CAA3B;EAaA,MAAMJ,IAAI,GAAGmC,OAAO,CAACN,QAAQ,CAAC,MAAMJ,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACzB,IAAhD,CAAT,CAApB;EACA,MAAME,QAAQ,GAAGkC,WAAW,CAACP,QAAQ,CAAC,MAAMJ,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACvB,QAAhD,CAAT,CAA5B;EACA,MAAMmC,KAAK,GAAGb,GAAG,CAAC,KAAD,CAAjB;EACA,MAAMc,QAAQ,GAAGT,QAAQ,CAAC,MAAM;IAC9B,OAAO3B,QAAQ,CAAC6B,KAAT,IAAkBH,OAAO,CAACG,KAAR,IAAiBrB,UAAU,CAACqB,KAAX,KAAqBV,KAAK,CAACjB,KAA9D,GAAsE,CAAC,CAAvE,GAA2E,CAAlF;EACD,CAFwB,CAAzB;EAGA,OAAO;IACLmB,QADK;IAELK,OAFK;IAGLH,UAHK;IAILY,KAJK;IAKLrC,IALK;IAMLE,QANK;IAOLoC,QAPK;IAQL5B;EARK,CAAP;AAUF,CAjCY","names":["radioPropsBase","buildProps","size","useSizeProp","disabled","Boolean","label","type","String","Number","default","radioProps","modelValue","name","border","radioEmits","UPDATE_MODEL_EVENT","val","isString","isNumber","isBoolean","change","useRadio","props","emit","radioRef","ref","radioGroup","inject","radioGroupKey","isGroup","computed","get","value","set","changeEvent","checked","useSize","useDisabled","focus","tabIndex"],"sources":["../../../../../../packages/components/radio/src/radio.ts"],"sourcesContent":["import { computed, inject, ref } from 'vue'\nimport { buildProps, isBoolean, isNumber, isString } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport { useDisabled, useSize, useSizeProp } from '@element-plus/hooks'\nimport type { ExtractPropTypes, SetupContext } from 'vue'\nimport type Radio from './radio.vue'\n\nexport const radioPropsBase = buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  label: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n})\n\nexport const radioProps = buildProps({\n  ...radioPropsBase,\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n  name: {\n    type: String,\n    default: '',\n  },\n  border: Boolean,\n} as const)\n\nexport const radioEmits = {\n  [UPDATE_MODEL_EVENT]: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport const useRadio = (\n  props: { label: RadioProps['label']; modelValue?: RadioProps['modelValue'] },\n  emit?: SetupContext<RadioEmits>['emit']\n) => {\n  const radioRef = ref<HTMLInputElement>()\n  const radioGroup = inject(radioGroupKey, undefined)\n  const isGroup = computed(() => !!radioGroup)\n  const modelValue = computed<RadioProps['modelValue']>({\n    get() {\n      return isGroup.value ? radioGroup!.modelValue : props.modelValue!\n    },\n    set(val) {\n      if (isGroup.value) {\n        radioGroup!.changeEvent(val)\n      } else {\n        emit && emit(UPDATE_MODEL_EVENT, val)\n      }\n      radioRef.value!.checked = props.modelValue === props.label\n    },\n  })\n\n  const size = useSize(computed(() => radioGroup?.size))\n  const disabled = useDisabled(computed(() => radioGroup?.disabled))\n  const focus = ref(false)\n  const tabIndex = computed(() => {\n    return disabled.value || (isGroup.value && modelValue.value !== props.label)\n      ? -1\n      : 0\n  })\n\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue,\n  }\n}\n\nexport type RadioProps = ExtractPropTypes<typeof radioProps>\nexport type RadioEmits = typeof radioEmits\nexport type RadioInstance = InstanceType<typeof Radio>\n"]},"metadata":{},"sourceType":"module"}