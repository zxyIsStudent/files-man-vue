{"ast":null,"code":"import { defineComponent, ref, computed, watch, nextTick, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString, createCommentVNode, Fragment, renderList, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport ElDatePickerCell from './basic-cell-render2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { castArray } from '../../../../utils/arrays2.mjs';\n\nconst _sfc_main = defineComponent({\n  components: {\n    ElDatePickerCell\n  },\n  props: {\n    date: {\n      type: Object\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    parsedValue: {\n      type: [Object, Array]\n    },\n    selectionMode: {\n      type: String,\n      default: \"date\"\n    },\n    showWeekNumber: {\n      type: Boolean,\n      default: false\n    },\n    disabledDate: {\n      type: Function\n    },\n    cellClassName: {\n      type: Function\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n  expose: [\"focus\"],\n\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const tbodyRef = ref();\n    const currentCellRef = ref();\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const tableRows = ref([[], [], [], [], [], []]);\n    const firstDayOfWeek = props.date.$locale().weekStart || 7;\n    const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map(_ => _.toLowerCase());\n    const offsetDay = computed(() => {\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n    });\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf(\"month\");\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n    });\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n    });\n    const hasCurrent = computed(() => {\n      return rows.value.flat().some(row => {\n        return row.isCurrent;\n      });\n    });\n    const rows = computed(() => {\n      var _a;\n\n      const startOfMonth = props.date.startOf(\"month\");\n      const startOfMonthDay = startOfMonth.day() || 7;\n      const dateCountOfMonth = startOfMonth.daysInMonth();\n      const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n      const offset = offsetDay.value;\n      const rows_ = tableRows.value;\n      let count = 1;\n      const selectedDate = props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n      const calNow = dayjs().locale(lang.value).startOf(\"day\");\n\n      for (let i = 0; i < 6; i++) {\n        const row = rows_[i];\n\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: \"week\",\n              text: startDate.value.add(i * 7 + 1, \"day\").week()\n            };\n          }\n        }\n\n        for (let j = 0; j < 7; j++) {\n          let cell = row[props.showWeekNumber ? j + 1 : j];\n\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n\n          const index = i * 7 + j;\n          const calTime = startDate.value.add(index - offset, \"day\");\n          cell.dayjs = calTime;\n          cell.date = calTime.toDate();\n          cell.timestamp = calTime.valueOf();\n          cell.type = \"normal\";\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"day\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"day\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"day\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"day\");\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"day\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"day\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"day\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"day\");\n          }\n\n          const isToday = calTime.isSame(calNow, \"day\");\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          if (i >= 0 && i <= 1) {\n            const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j % 7) + 1 + i * 7;\n              cell.type = \"prev-month\";\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = count++ - dateCountOfMonth;\n              cell.type = \"next-month\";\n            }\n          }\n\n          const cellDate = calTime.toDate();\n          cell.selected = selectedDate.find(_ => _.valueOf() === calTime.valueOf());\n          cell.isSelected = !!cell.selected;\n          cell.isCurrent = isCurrent(cell);\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          cell.customClass = props.cellClassName && props.cellClassName(cellDate);\n          row[props.showWeekNumber ? j + 1 : j] = cell;\n        }\n\n        if (props.selectionMode === \"week\") {\n          const start = props.showWeekNumber ? 1 : 0;\n          const end = props.showWeekNumber ? 7 : 6;\n          const isActive = isWeekActive(row[start + 1]);\n          row[start].inRange = isActive;\n          row[start].start = isActive;\n          row[end].inRange = isActive;\n          row[end].end = isActive;\n        }\n      }\n\n      return rows_;\n    });\n    watch(() => props.date, async () => {\n      var _a, _b;\n\n      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {\n        await nextTick();\n        (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n      }\n    });\n\n    const focus = async () => {\n      var _a;\n\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n\n    const isCurrent = cell => {\n      return props.selectionMode === \"date\" && (cell.type === \"normal\" || cell.type === \"today\") && cellMatchesDate(cell, props.parsedValue);\n    };\n\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false;\n      return dayjs(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), \"day\");\n    };\n\n    const getCellClasses = cell => {\n      const classes = [];\n\n      if ((cell.type === \"normal\" || cell.type === \"today\") && !cell.disabled) {\n        classes.push(\"available\");\n\n        if (cell.type === \"today\") {\n          classes.push(\"today\");\n        }\n      } else {\n        classes.push(cell.type);\n      }\n\n      if (isCurrent(cell)) {\n        classes.push(\"current\");\n      }\n\n      if (cell.inRange && (cell.type === \"normal\" || cell.type === \"today\" || props.selectionMode === \"week\")) {\n        classes.push(\"in-range\");\n\n        if (cell.start) {\n          classes.push(\"start-date\");\n        }\n\n        if (cell.end) {\n          classes.push(\"end-date\");\n        }\n      }\n\n      if (cell.disabled) {\n        classes.push(\"disabled\");\n      }\n\n      if (cell.selected) {\n        classes.push(\"selected\");\n      }\n\n      if (cell.customClass) {\n        classes.push(cell.customClass);\n      }\n\n      return classes.join(\" \");\n    };\n\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;\n      return startDate.value.add(offsetFromStart, \"day\");\n    };\n\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n\n      if (target.tagName === \"SPAN\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: getDateOfCell(row, column)\n        });\n      }\n    };\n\n    const isSelectedCell = cell => {\n      return !hasCurrent.value && (cell == null ? void 0 : cell.text) === 1 && cell.type === \"normal\" || cell.isCurrent;\n    };\n\n    const handleFocus = event => {\n      if (!hasCurrent.value && props.selectionMode === \"date\") {\n        handlePickDate(event, true);\n      }\n    };\n\n    const handlePickDate = (event, isKeyboardMovement = false) => {\n      let target = event.target;\n      target = target == null ? void 0 : target.closest(\"td\");\n      if (!target || target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      const cell = rows.value[row][column];\n      if (cell.disabled || cell.type === \"week\") return;\n      const newDate = getDateOfCell(row, column);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          ctx.emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"date\") {\n        ctx.emit(\"pick\", newDate, isKeyboardMovement);\n      } else if (props.selectionMode === \"week\") {\n        const weekNumber = newDate.week();\n        const value = `${newDate.year()}w${weekNumber}`;\n        ctx.emit(\"pick\", {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf(\"week\")\n        });\n      } else if (props.selectionMode === \"dates\") {\n        const newValue = cell.selected ? castArray(props.parsedValue).filter(_ => _.valueOf() !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n        ctx.emit(\"pick\", newValue);\n      }\n    };\n\n    const isWeekActive = cell => {\n      if (props.selectionMode !== \"week\") return false;\n      let newDate = props.date.startOf(\"day\");\n\n      if (cell.type === \"prev-month\") {\n        newDate = newDate.subtract(1, \"month\");\n      }\n\n      if (cell.type === \"next-month\") {\n        newDate = newDate.add(1, \"month\");\n      }\n\n      newDate = newDate.date(Number.parseInt(cell.text, 10));\n\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n        const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n        return weekDate.isSame(newDate, \"day\");\n      }\n\n      return false;\n    };\n\n    return {\n      tbodyRef,\n      currentCellRef,\n      handleMouseMove,\n      t,\n      hasCurrent,\n      rows,\n      isSelectedCell,\n      isWeekActive,\n      getCellClasses,\n      WEEKS,\n      handleFocus,\n      handlePickDate,\n      focus\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  ref: \"tbodyRef\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  scope: \"col\"\n};\nconst _hoisted_4 = [\"aria-label\"];\nconst _hoisted_5 = [\"aria-current\", \"aria-selected\", \"tabindex\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_date_picker_cell = resolveComponent(\"el-date-picker-cell\");\n\n  return openBlock(), createElementBlock(\"table\", {\n    role: \"grid\",\n    \"aria-label\": _ctx.t(\"el.datepicker.dateTablePrompt\"),\n    cellspacing: \"0\",\n    cellpadding: \"0\",\n    class: normalizeClass([\"el-date-table\", {\n      \"is-week-mode\": _ctx.selectionMode === \"week\"\n    }]),\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handlePickDate && _ctx.handlePickDate(...args)),\n    onMousemove: _cache[2] || (_cache[2] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", _hoisted_2, [createElementVNode(\"tr\", null, [_ctx.showWeekNumber ? (openBlock(), createElementBlock(\"th\", _hoisted_3, toDisplayString(_ctx.t(\"el.datepicker.week\")), 1)) : createCommentVNode(\"v-if\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.WEEKS, (week, key) => {\n    return openBlock(), createElementBlock(\"th\", {\n      key,\n      scope: \"col\",\n      \"aria-label\": _ctx.t(\"el.datepicker.weeksFull.\" + week)\n    }, toDisplayString(_ctx.t(\"el.datepicker.weeks.\" + week)), 9, _hoisted_4);\n  }), 128))]), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key,\n      class: normalizeClass([\"el-date-table__row\", {\n        current: _ctx.isWeekActive(row[1])\n      }])\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        ref_for: true,\n        ref: el => _ctx.isSelectedCell(cell) && (_ctx.currentCellRef = el),\n        class: normalizeClass(_ctx.getCellClasses(cell)),\n        \"aria-current\": cell.isCurrent ? \"date\" : void 0,\n        \"aria-selected\": `${cell.isCurrent}`,\n        tabindex: _ctx.isSelectedCell(cell) ? 0 : -1,\n        onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args))\n      }, [createVNode(_component_el_date_picker_cell, {\n        cell\n      }, null, 8, [\"cell\"])], 42, _hoisted_5);\n    }), 128))], 2);\n  }), 128))], 512)], 42, _hoisted_1);\n}\n\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue\"]]);\n\nexport { DateTable as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElDatePickerCell","props","date","type","minDate","maxDate","parsedValue","Object","Array","selectionMode","default","showWeekNumber","disabledDate","cellClassName","rangeState","endDate","selecting","emits","expose","setup","ctx","t","lang","useLocale","tbodyRef","ref","currentCellRef","tableRows","firstDayOfWeek","$locale","weekStart","WEEKS_CONSTANT","locale","localeData","weekdaysShort","map","_","toLowerCase","computed","startDayOfMonth","startOf","subtract","day","concat","slice","rows","value","flat","some","row","dateCountOfMonth","dateCountOfLastMonth","offset","offsetDay","rows_","castArray","i","text","j","cell","column","inRange","start","end","index","calTime","timestamp","calEndDate","_a","isToday","numberOfDaysFromPreviousMonth","count","isCurrent","disabled","customClass","isActive","watch","_b","isSame","classes","push","selected","add","offsetFromStart","handleMouseMove","tagName","target","parentNode","lastRow","lastColumn","handlePickDate","event","isKeyboardMovement","rowIndex","getDateOfCell","newDate","year","week","newValue","isWeekActive","hasCurrent","isSelectedCell","getCellClasses","WEEKS","handleFocus","focus","_hoisted_2","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","role","cellspacing","cellpadding","class","onClick","onMousemove","_createElementVNode","_createElementBlock","key","scope","_toDisplayString","_hoisted_4","current","ref_for","_normalizeClass","tabindex","onFocus","_renderList"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-date-table.vue"],"sourcesContent":["<template>\n  <table\n    role=\"grid\"\n    :aria-label=\"t('el.datepicker.dateTablePrompt')\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n    class=\"el-date-table\"\n    :class=\"{ 'is-week-mode': selectionMode === 'week' }\"\n    @click=\"handlePickDate\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody ref=\"tbodyRef\">\n      <tr>\n        <th v-if=\"showWeekNumber\" scope=\"col\">{{ t('el.datepicker.week') }}</th>\n        <th\n          v-for=\"(week, key) in WEEKS\"\n          :key=\"key\"\n          scope=\"col\"\n          :aria-label=\"t('el.datepicker.weeksFull.' + week)\"\n        >\n          {{ t('el.datepicker.weeks.' + week) }}\n        </th>\n      </tr>\n      <tr\n        v-for=\"(row, key) in rows\"\n        :key=\"key\"\n        class=\"el-date-table__row\"\n        :class=\"{ current: isWeekActive(row[1]) }\"\n      >\n        <td\n          v-for=\"(cell, key_) in row\"\n          :key=\"key_\"\n          :ref=\"(el) => isSelectedCell(cell) && (currentCellRef = el)\"\n          :class=\"getCellClasses(cell)\"\n          :aria-current=\"cell.isCurrent ? 'date' : undefined\"\n          :aria-selected=\"`${cell.isCurrent}`\"\n          :tabindex=\"isSelectedCell(cell) ? 0 : -1\"\n          @focus=\"handleFocus\"\n        >\n          <el-date-picker-cell :cell=\"cell\" />\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, nextTick, ref, watch } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { castArray } from '@element-plus/utils'\nimport ElDatePickerCell from './basic-cell-render'\nimport type { PropType } from 'vue'\n\nimport type { Dayjs } from 'dayjs'\nimport type { DateCell } from '../date-picker.type'\n\nexport default defineComponent({\n  components: {\n    ElDatePickerCell,\n  },\n  props: {\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: [Object, Array] as PropType<Dayjs | Dayjs[]>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'date',\n    },\n    showWeekNumber: {\n      type: Boolean,\n      default: false,\n    },\n    disabledDate: {\n      type: Function,\n    },\n    cellClassName: {\n      type: Function,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n  emits: ['changerange', 'pick', 'select'],\n  expose: ['focus'],\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n\n    const tbodyRef = ref<HTMLElement>()\n    const currentCellRef = ref<HTMLElement>()\n    // data\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const tableRows = ref<DateCell[][]>([[], [], [], [], [], []])\n\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek = (props.date as any).$locale().weekStart || 7\n    const WEEKS_CONSTANT = props.date\n      .locale('en')\n      .localeData()\n      .weekdaysShort()\n      .map((_) => _.toLowerCase())\n\n    const offsetDay = computed(() => {\n      // Sunday 7(0), cal the left and right offset days, 3217654, such as Monday is -1, the is to adjust the position of the first two rows of dates\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek\n    })\n\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf('month')\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, 'day')\n    })\n\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(\n        firstDayOfWeek,\n        firstDayOfWeek + 7\n      )\n    })\n\n    const hasCurrent = computed<boolean>(() => {\n      return rows.value.flat().some((row) => {\n        return row.isCurrent\n      })\n    })\n\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const startOfMonth = props.date.startOf('month')\n      const startOfMonthDay = startOfMonth.day() || 7 // day of first day\n      const dateCountOfMonth = startOfMonth.daysInMonth()\n      const dateCountOfLastMonth = startOfMonth\n        .subtract(1, 'month')\n        .daysInMonth()\n\n      const offset = offsetDay.value\n      const rows_ = tableRows.value\n      let count = 1\n\n      const selectedDate: Dayjs[] =\n        props.selectionMode === 'dates' ? castArray(props.parsedValue) : []\n\n      const calNow = dayjs().locale(lang.value).startOf('day')\n\n      for (let i = 0; i < 6; i++) {\n        const row = rows_[i]\n\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: 'week',\n              text: startDate.value.add(i * 7 + 1, 'day').week(),\n            }\n          }\n        }\n\n        for (let j = 0; j < 7; j++) {\n          let cell = row[props.showWeekNumber ? j + 1 : j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n          const index = i * 7 + j\n          const calTime = startDate.value.add(index - offset, 'day')\n          cell.dayjs = calTime\n          cell.date = calTime.toDate()\n          cell.timestamp = calTime.valueOf()\n          cell.type = 'normal'\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'day') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'day')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'day') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'day'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'day')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'day')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'day')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'day')\n          }\n\n          const isToday = calTime.isSame(calNow, 'day')\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n\n          if (i >= 0 && i <= 1) {\n            const numberOfDaysFromPreviousMonth =\n              startOfMonthDay + offset < 0\n                ? 7 + startOfMonthDay + offset\n                : startOfMonthDay + offset\n\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++\n            } else {\n              cell.text =\n                dateCountOfLastMonth -\n                (numberOfDaysFromPreviousMonth - (j % 7)) +\n                1 +\n                i * 7\n              cell.type = 'prev-month'\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++\n            } else {\n              cell.text = count++ - dateCountOfMonth\n              cell.type = 'next-month'\n            }\n          }\n\n          const cellDate = calTime.toDate()\n          cell.selected = selectedDate.find(\n            (_) => _.valueOf() === calTime.valueOf()\n          )\n          cell.isSelected = !!cell.selected\n          cell.isCurrent = isCurrent(cell)\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          cell.customClass =\n            props.cellClassName && props.cellClassName(cellDate)\n          row[props.showWeekNumber ? j + 1 : j] = cell\n        }\n\n        if (props.selectionMode === 'week') {\n          const start = props.showWeekNumber ? 1 : 0\n          const end = props.showWeekNumber ? 7 : 6\n          const isActive = isWeekActive(row[start + 1])\n          row[start].inRange = isActive\n          row[start].start = isActive\n          row[end].inRange = isActive\n          row[end].end = isActive\n        }\n      }\n      return rows_\n    })\n\n    watch(\n      () => props.date,\n      async () => {\n        if (tbodyRef.value?.contains(document.activeElement)) {\n          await nextTick()\n          currentCellRef.value?.focus()\n        }\n      }\n    )\n\n    const focus = async () => {\n      currentCellRef.value?.focus()\n    }\n\n    const isCurrent = (cell): boolean => {\n      return (\n        props.selectionMode === 'date' &&\n        (cell.type === 'normal' || cell.type === 'today') &&\n        cellMatchesDate(cell, props.parsedValue)\n      )\n    }\n\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false\n      return dayjs(date)\n        .locale(lang.value)\n        .isSame(props.date.date(Number(cell.text)), 'day')\n    }\n\n    const getCellClasses = (cell) => {\n      const classes: string[] = []\n      if ((cell.type === 'normal' || cell.type === 'today') && !cell.disabled) {\n        classes.push('available')\n        if (cell.type === 'today') {\n          classes.push('today')\n        }\n      } else {\n        classes.push(cell.type)\n      }\n\n      if (isCurrent(cell)) {\n        classes.push('current')\n      }\n\n      if (\n        cell.inRange &&\n        (cell.type === 'normal' ||\n          cell.type === 'today' ||\n          props.selectionMode === 'week')\n      ) {\n        classes.push('in-range')\n\n        if (cell.start) {\n          classes.push('start-date')\n        }\n\n        if (cell.end) {\n          classes.push('end-date')\n        }\n      }\n\n      if (cell.disabled) {\n        classes.push('disabled')\n      }\n\n      if (cell.selected) {\n        classes.push('selected')\n      }\n\n      if (cell.customClass) {\n        classes.push(cell.customClass)\n      }\n\n      return classes.join(' ')\n    }\n\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart =\n        row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value\n      return startDate.value.add(offsetFromStart, 'day')\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'SPAN') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex - 1\n      const column = target.cellIndex\n\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: getDateOfCell(row, column),\n        })\n      }\n    }\n\n    const isSelectedCell = (cell: DateCell) => {\n      return (\n        (!hasCurrent.value && cell?.text === 1 && cell.type === 'normal') ||\n        cell.isCurrent\n      )\n    }\n\n    const handleFocus = (event: Event) => {\n      if (!hasCurrent.value && props.selectionMode === 'date') {\n        handlePickDate(event, true)\n      }\n    }\n\n    const handlePickDate = (event: Event, isKeyboardMovement = false) => {\n      let target = event.target as HTMLElement\n\n      target = target?.closest('td')\n\n      if (!target || target.tagName !== 'TD') return\n\n      const row = (target.parentNode as HTMLTableRowElement).rowIndex - 1\n      const column = (target as HTMLTableCellElement).cellIndex\n      const cell = rows.value[row][column]\n\n      if (cell.disabled || cell.type === 'week') return\n\n      const newDate = getDateOfCell(row, column)\n\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else if (props.selectionMode === 'date') {\n        ctx.emit('pick', newDate, isKeyboardMovement)\n      } else if (props.selectionMode === 'week') {\n        const weekNumber = newDate.week()\n        const value = `${newDate.year()}w${weekNumber}`\n        ctx.emit('pick', {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf('week'),\n        })\n      } else if (props.selectionMode === 'dates') {\n        const newValue = cell.selected\n          ? castArray(props.parsedValue).filter(\n              (_) => _.valueOf() !== newDate.valueOf()\n            )\n          : castArray(props.parsedValue).concat([newDate])\n        ctx.emit('pick', newValue)\n      }\n    }\n\n    const isWeekActive = (cell) => {\n      if (props.selectionMode !== 'week') return false\n      let newDate = props.date.startOf('day')\n\n      if (cell.type === 'prev-month') {\n        newDate = newDate.subtract(1, 'month')\n      }\n\n      if (cell.type === 'next-month') {\n        newDate = newDate.add(1, 'month')\n      }\n\n      newDate = newDate.date(Number.parseInt(cell.text, 10))\n\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset =\n          ((props.parsedValue.day() - firstDayOfWeek + 7) % 7) - 1\n        const weekDate = props.parsedValue.subtract(dayOffset, 'day')\n        return weekDate.isSame(newDate, 'day')\n      }\n      return false\n    }\n\n    return {\n      tbodyRef,\n      currentCellRef,\n      handleMouseMove,\n      t,\n      hasCurrent,\n      rows,\n      isSelectedCell,\n      isWeekActive,\n      getCellClasses,\n      WEEKS,\n      handleFocus,\n      handlePickDate,\n      focus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}