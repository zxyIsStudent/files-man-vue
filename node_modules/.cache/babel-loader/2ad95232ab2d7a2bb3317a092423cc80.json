{"ast":null,"code":"import { isVNode, defineComponent, renderSlot, createVNode, createTextVNode } from 'vue';\nimport { isString, isArray } from '@vue/shared';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport Item from './item2.mjs';\nimport { useSpace } from './use-space2.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props2.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { componentSizes } from '../../../constants/size2.mjs';\nimport { isFragment, PatchFlags, isValidElementNode } from '../../../utils/vue/vnode2.mjs';\nconst spaceProps = buildProps({\n  direction: {\n    type: String,\n    values: [\"horizontal\", \"vertical\"],\n    default: \"horizontal\"\n  },\n  class: {\n    type: definePropType([String, Object, Array]),\n    default: \"\"\n  },\n  style: {\n    type: definePropType([String, Array, Object]),\n    default: \"\"\n  },\n  alignment: {\n    type: definePropType(String),\n    default: \"center\"\n  },\n  prefixCls: {\n    type: String\n  },\n  spacer: {\n    type: definePropType([Object, String, Number, Array]),\n    default: null,\n    validator: val => isVNode(val) || isNumber(val) || isString(val)\n  },\n  wrap: {\n    type: Boolean,\n    default: false\n  },\n  fill: {\n    type: Boolean,\n    default: false\n  },\n  fillRatio: {\n    type: Number,\n    default: 100\n  },\n  size: {\n    type: [String, Array, Number],\n    values: componentSizes,\n    validator: val => {\n      return isNumber(val) || isArray(val) && val.length === 2 && val.every(i => isNumber(i));\n    }\n  }\n});\nvar Space = defineComponent({\n  name: \"ElSpace\",\n  props: spaceProps,\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      classes,\n      containerStyle,\n      itemStyle\n    } = useSpace(props);\n    return () => {\n      var _a;\n\n      const {\n        spacer,\n        prefixCls,\n        direction\n      } = props;\n      const children = renderSlot(slots, \"default\", {\n        key: 0\n      }, () => []);\n      if (((_a = children.children) != null ? _a : []).length === 0) return null;\n\n      if (isArray(children.children)) {\n        let extractedChildren = [];\n        children.children.forEach((child, loopKey) => {\n          if (isFragment(child)) {\n            if (isArray(child.children)) {\n              child.children.forEach((nested, key) => {\n                extractedChildren.push(createVNode(Item, {\n                  style: itemStyle.value,\n                  prefixCls,\n                  key: `nested-${key}`\n                }, {\n                  default: () => [nested]\n                }, PatchFlags.PROPS | PatchFlags.STYLE, [\"style\", \"prefixCls\"]));\n              });\n            }\n          } else if (isValidElementNode(child)) {\n            extractedChildren.push(createVNode(Item, {\n              style: itemStyle.value,\n              prefixCls,\n              key: `LoopKey${loopKey}`\n            }, {\n              default: () => [child]\n            }, PatchFlags.PROPS | PatchFlags.STYLE, [\"style\", \"prefixCls\"]));\n          }\n        });\n\n        if (spacer) {\n          const len = extractedChildren.length - 1;\n          extractedChildren = extractedChildren.reduce((acc, child, idx) => {\n            const children2 = [...acc, child];\n\n            if (idx !== len) {\n              children2.push(createVNode(\"span\", {\n                style: [itemStyle.value, direction === \"vertical\" ? \"width: 100%\" : null],\n                key: idx\n              }, [isVNode(spacer) ? spacer : createTextVNode(spacer, PatchFlags.TEXT)], PatchFlags.STYLE));\n            }\n\n            return children2;\n          }, []);\n        }\n\n        return createVNode(\"div\", {\n          class: classes.value,\n          style: containerStyle.value\n        }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);\n      }\n\n      return children.children;\n    };\n  }\n\n});\nexport { Space as default, spaceProps };","map":{"version":3,"mappings":"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","names":["spaceProps","buildProps","direction","type","String","values","default","class","definePropType","Object","Array","style","alignment","prefixCls","spacer","Number","validator","val","isVNode","isNumber","isString","wrap","Boolean","fill","fillRatio","size","componentSizes","isArray","length","every","i","defineComponent","name","props","setup","slots","classes","containerStyle","itemStyle","useSpace","_a","children","renderSlot","key","extractedChildren","forEach","child","loopKey","isFragment","nested","push","createVNode","Item","value","PatchFlags","PROPS","STYLE","isValidElementNode","len","reduce","acc","idx","children2","createTextVNode","TEXT","CLASS"],"sources":["../../../../../../packages/components/space/src/space.ts"],"sourcesContent":["import {\n  createTextVNode,\n  createVNode,\n  defineComponent,\n  isVNode,\n  renderSlot,\n} from 'vue'\nimport { isString } from '@vue/shared'\nimport {\n  PatchFlags,\n  buildProps,\n  definePropType,\n  isArray,\n  isFragment,\n  isNumber,\n  isValidElementNode,\n} from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\nimport Item from './item.vue'\nimport { useSpace } from './use-space'\n\nimport type { ExtractPropTypes, StyleValue, VNode, VNodeChild } from 'vue'\nimport type { AlignItemsProperty } from 'csstype'\n\nexport const spaceProps = buildProps({\n  direction: {\n    type: String,\n    values: ['horizontal', 'vertical'],\n    default: 'horizontal',\n  },\n\n  class: {\n    type: definePropType<string | string[] | Record<string, boolean>>([\n      String,\n      Object,\n      Array,\n    ]),\n    default: '',\n  },\n\n  style: {\n    type: definePropType<StyleValue>([String, Array, Object]),\n    default: '',\n  },\n\n  alignment: {\n    type: definePropType<AlignItemsProperty>(String),\n    default: 'center',\n  },\n\n  prefixCls: {\n    type: String,\n  },\n\n  spacer: {\n    type: definePropType<VNodeChild>([Object, String, Number, Array]),\n    default: null,\n    validator: (val: unknown) => isVNode(val) || isNumber(val) || isString(val),\n  },\n\n  wrap: {\n    type: Boolean,\n    default: false,\n  },\n\n  fill: {\n    type: Boolean,\n    default: false,\n  },\n\n  fillRatio: {\n    type: Number,\n    default: 100,\n  },\n\n  size: {\n    type: [String, Array, Number],\n    values: componentSizes,\n    validator: (val: unknown): val is [number, number] | number => {\n      return (\n        isNumber(val) ||\n        (isArray(val) && val.length === 2 && val.every((i) => isNumber(i)))\n      )\n    },\n  },\n} as const)\nexport type SpaceProps = ExtractPropTypes<typeof spaceProps>\n\nexport default defineComponent({\n  name: 'ElSpace',\n\n  props: spaceProps,\n\n  setup(props, { slots }) {\n    const { classes, containerStyle, itemStyle } = useSpace(props)\n\n    return () => {\n      const { spacer, prefixCls, direction } = props\n\n      const children = renderSlot(slots, 'default', { key: 0 }, () => [])\n      // retrieve the children out via a simple for loop\n      // the edge case here is that when users uses directives like <v-for>, <v-if>\n      // we need to go one layer deeper\n\n      if ((children.children ?? []).length === 0) return null\n\n      // loop the children, if current children is rendered via `renderList` or `<v-for>`\n      if (isArray(children.children)) {\n        let extractedChildren: VNode[] = []\n        children.children.forEach((child, loopKey) => {\n          if (isFragment(child)) {\n            if (isArray(child.children)) {\n              child.children.forEach((nested, key) => {\n                extractedChildren.push(\n                  createVNode(\n                    Item,\n                    {\n                      style: itemStyle.value,\n                      prefixCls,\n                      key: `nested-${key}`,\n                    },\n                    {\n                      default: () => [nested],\n                    },\n                    PatchFlags.PROPS | PatchFlags.STYLE,\n                    ['style', 'prefixCls']\n                  )\n                )\n              })\n            }\n            // if the current child is valid vnode, then append this current vnode\n            // to item as child node.\n          } else if (isValidElementNode(child)) {\n            extractedChildren.push(\n              createVNode(\n                Item,\n                {\n                  style: itemStyle.value,\n                  prefixCls,\n                  key: `LoopKey${loopKey}`,\n                },\n                {\n                  default: () => [child],\n                },\n                PatchFlags.PROPS | PatchFlags.STYLE,\n                ['style', 'prefixCls']\n              )\n            )\n          }\n        })\n\n        if (spacer) {\n          // track the current rendering index, when encounters the last element\n          // then no need to add a spacer after it.\n          const len = extractedChildren.length - 1\n          extractedChildren = extractedChildren.reduce<VNode[]>(\n            (acc, child, idx) => {\n              const children = [...acc, child]\n              if (idx !== len) {\n                children.push(\n                  createVNode(\n                    'span',\n                    // adding width 100% for vertical alignment,\n                    // when the spacer inherit the width from the\n                    // parent, this span's width was not set, so space\n                    // might disappear\n                    {\n                      style: [\n                        itemStyle.value,\n                        direction === 'vertical' ? 'width: 100%' : null,\n                      ],\n                      key: idx,\n                    },\n                    [\n                      // if spacer is already a valid vnode, then append it to the current\n                      // span element.\n                      // otherwise, treat it as string.\n                      isVNode(spacer)\n                        ? spacer\n                        : createTextVNode(spacer as string, PatchFlags.TEXT),\n                    ],\n                    PatchFlags.STYLE\n                  )\n                )\n              }\n              return children\n            },\n            []\n          )\n        }\n\n        // spacer container.\n        return createVNode(\n          'div',\n          {\n            class: classes.value,\n            style: containerStyle.value,\n          },\n          extractedChildren,\n          PatchFlags.STYLE | PatchFlags.CLASS\n        )\n      }\n\n      return children.children\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}