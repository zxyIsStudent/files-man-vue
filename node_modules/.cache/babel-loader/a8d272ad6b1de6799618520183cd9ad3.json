{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { inject, computed, ref, getCurrentInstance, nextTick, watch } from 'vue';\nimport { toTypeString, isString } from '@vue/shared';\nimport '../../../constants/index2.mjs';\nimport '../../../tokens/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport { useSizeProp, useSize } from '../../../hooks/use-common-props/index2.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form2.mjs';\nimport { useFormItemInputId } from '../../../hooks/use-form-item/index2.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nimport { debugWarn } from '../../../utils/error2.mjs';\nimport { isNumber, isBoolean } from '@vueuse/core';\nconst useCheckboxGroupProps = {\n  modelValue: {\n    type: Array,\n    default: () => []\n  },\n  disabled: Boolean,\n  min: {\n    type: Number,\n    default: void 0\n  },\n  max: {\n    type: Number,\n    default: void 0\n  },\n  size: useSizeProp,\n  id: {\n    type: String,\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  fill: {\n    type: String,\n    default: void 0\n  },\n  textColor: {\n    type: String,\n    default: void 0\n  },\n  tag: {\n    type: String,\n    default: \"div\"\n  }\n};\nconst checkboxProps = {\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: () => void 0\n  },\n  label: {\n    type: [String, Boolean, Number, Object]\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: void 0\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  id: {\n    type: String,\n    default: void 0\n  },\n  controls: {\n    type: String,\n    default: void 0\n  },\n  border: Boolean,\n  size: useSizeProp,\n  tabindex: [String, Number]\n};\n\nconst useCheckboxGroup = () => {\n  const elForm = inject(formContextKey, {});\n  const elFormItem = inject(formItemContextKey, {});\n  const checkboxGroup = inject(\"CheckboxGroup\", {});\n  const isGroup = computed(() => checkboxGroup && (checkboxGroup == null ? void 0 : checkboxGroup.name) === \"ElCheckboxGroup\");\n  const elFormItemSize = computed(() => {\n    return elFormItem.size;\n  });\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem\n  };\n};\n\nconst useCheckboxGroupId = (props, {\n  elFormItem\n}) => {\n  const {\n    inputId: groupId,\n    isLabeledByFormItem\n  } = useFormItemInputId(props, {\n    formItemContext: elFormItem\n  });\n  return {\n    isLabeledByFormItem,\n    groupId\n  };\n};\n\nconst useModel = props => {\n  const selfModel = ref(false);\n  const {\n    emit\n  } = getCurrentInstance();\n  const {\n    isGroup,\n    checkboxGroup,\n    elFormItem\n  } = useCheckboxGroup();\n  const isLimitExceeded = ref(false);\n  const model = computed({\n    get() {\n      var _a, _b;\n\n      return isGroup.value ? (_a = checkboxGroup.modelValue) == null ? void 0 : _a.value : (_b = props.modelValue) != null ? _b : selfModel.value;\n    },\n\n    set(val) {\n      var _a;\n\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value = checkboxGroup.max !== void 0 && val.length > checkboxGroup.max.value;\n        isLimitExceeded.value === false && ((_a = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a.call(checkboxGroup, val));\n      } else {\n        emit(UPDATE_MODEL_EVENT, val);\n        selfModel.value = val;\n      }\n    }\n\n  });\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem\n  };\n};\n\nconst useCheckboxStatus = (props, slots, {\n  model\n}) => {\n  const {\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const focus = ref(false);\n  const size = useSize(checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize, {\n    prop: true\n  });\n  const isChecked = computed(() => {\n    const value = model.value;\n\n    if (toTypeString(value) === \"[object Boolean]\") {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.includes(props.label);\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxSize = useSize(computed(() => {\n    var _a;\n\n    return isGroup.value ? (_a = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value : void 0;\n  }));\n  const hasOwnLabel = computed(() => {\n    return !!(slots.default || props.label);\n  });\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize,\n    hasOwnLabel\n  };\n};\n\nconst useDisabled = (props, {\n  model,\n  isChecked\n}) => {\n  const {\n    elForm,\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const isLimitDisabled = computed(() => {\n    var _a, _b;\n\n    const max = (_a = checkboxGroup.max) == null ? void 0 : _a.value;\n    const min = (_b = checkboxGroup.min) == null ? void 0 : _b.value;\n    return !!(max || min) && model.value.length >= max && !isChecked.value || model.value.length <= min && isChecked.value;\n  });\n  const isDisabled = computed(() => {\n    var _a, _b;\n\n    const disabled = props.disabled || (elForm == null ? void 0 : elForm.disabled);\n    return (_b = isGroup.value ? ((_a = checkboxGroup.disabled) == null ? void 0 : _a.value) || disabled || isLimitDisabled.value : disabled) != null ? _b : false;\n  });\n  return {\n    isDisabled,\n    isLimitDisabled\n  };\n};\n\nconst setStoreValue = (props, {\n  model\n}) => {\n  function addToStore() {\n    if (Array.isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label);\n    } else {\n      model.value = props.trueLabel || true;\n    }\n  }\n\n  props.checked && addToStore();\n};\n\nconst useEvent = (props, {\n  model,\n  isLimitExceeded,\n  hasOwnLabel,\n  isDisabled,\n  isLabeledByFormItem\n}) => {\n  const {\n    elFormItem\n  } = useCheckboxGroup();\n  const {\n    emit\n  } = getCurrentInstance();\n\n  function getLabeledValue(value) {\n    var _a, _b;\n\n    return value === props.trueLabel || value === true ? (_a = props.trueLabel) != null ? _a : true : (_b = props.falseLabel) != null ? _b : false;\n  }\n\n  function emitChangeEvent(checked, e) {\n    emit(\"change\", getLabeledValue(checked), e);\n  }\n\n  function handleChange(e) {\n    if (isLimitExceeded.value) return;\n    const target = e.target;\n    emit(\"change\", getLabeledValue(target.checked), e);\n  }\n\n  async function onClickRoot(e) {\n    if (isLimitExceeded.value) return;\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      model.value = getLabeledValue([false, props.falseLabel].includes(model.value));\n      await nextTick();\n      emitChangeEvent(model.value, e);\n    }\n  }\n\n  watch(() => props.modelValue, () => {\n    var _a;\n\n    (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n  });\n  return {\n    handleChange,\n    onClickRoot\n  };\n};\n\nconst checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: val => isString(val) || isNumber(val) || isBoolean(val),\n  change: val => isString(val) || isNumber(val) || isBoolean(val)\n};\n\nconst useCheckbox = (props, slots) => {\n  const {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem\n  } = useModel(props);\n  const {\n    focus,\n    size,\n    isChecked,\n    checkboxSize,\n    hasOwnLabel\n  } = useCheckboxStatus(props, slots, {\n    model\n  });\n  const {\n    isDisabled\n  } = useDisabled(props, {\n    model,\n    isChecked\n  });\n  const {\n    inputId,\n    isLabeledByFormItem\n  } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup\n  });\n  const {\n    handleChange,\n    onClickRoot\n  } = useEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem\n  });\n  setStoreValue(props, {\n    model\n  });\n  return {\n    elFormItem,\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isGroup,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n    focus,\n    size\n  };\n};\n\nexport { checkboxEmits, checkboxProps, useCheckbox, useCheckboxGroup, useCheckboxGroupId, useCheckboxGroupProps };","map":{"version":3,"mappings":"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","names":["useCheckboxGroupProps","modelValue","type","Array","default","disabled","Boolean","min","Number","max","size","useSizeProp","id","String","label","fill","textColor","tag","checkboxProps","Object","indeterminate","checked","name","trueLabel","falseLabel","controls","border","tabindex","useCheckboxGroup","elForm","inject","formContextKey","elFormItem","formItemContextKey","checkboxGroup","isGroup","computed","elFormItemSize","useCheckboxGroupId","props","inputId","groupId","isLabeledByFormItem","useFormItemInputId","formItemContext","useModel","selfModel","ref","emit","getCurrentInstance","isLimitExceeded","model","get","_a","_b","value","set","val","isArray","length","changeEvent","call","UPDATE_MODEL_EVENT","useCheckboxStatus","slots","focus","useSize","checkboxGroupSize","prop","isChecked","toTypeString","includes","checkboxSize","hasOwnLabel","useDisabled","isLimitDisabled","isDisabled","setStoreValue","addToStore","push","useEvent","getLabeledValue","emitChangeEvent","e","handleChange","target","onClickRoot","nextTick","watch","validate","catch","err","debugWarn","checkboxEmits","isString","isNumber","isBoolean","change","useCheckbox","disableIdGeneration","disableIdManagement"],"sources":["../../../../../../packages/components/checkbox/src/checkbox.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, nextTick, ref, watch } from 'vue'\nimport { toTypeString } from '@vue/shared'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useFormItemInputId, useSize, useSizeProp } from '@element-plus/hooks'\nimport { debugWarn, isBoolean, isNumber, isString } from '@element-plus/utils'\nimport type { ComponentInternalInstance, ExtractPropTypes, PropType } from 'vue'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { ICheckboxGroupInstance } from './checkbox.type'\nimport type Checkbox from './checkbox.vue'\n\nexport const useCheckboxGroupProps = {\n  modelValue: {\n    type: Array as PropType<Array<string | number>>,\n    default: () => [],\n  },\n  disabled: Boolean,\n  min: {\n    type: Number,\n    default: undefined,\n  },\n  max: {\n    type: Number,\n    default: undefined,\n  },\n  size: useSizeProp,\n  id: {\n    type: String,\n    default: undefined,\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n  fill: {\n    type: String,\n    default: undefined,\n  },\n  textColor: {\n    type: String,\n    default: undefined,\n  },\n  tag: {\n    type: String,\n    default: 'div',\n  },\n}\n\nexport type IUseCheckboxGroupProps = ExtractPropTypes<\n  typeof useCheckboxGroupProps\n>\n\nexport const checkboxProps = {\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: () => undefined,\n  },\n  label: {\n    type: [String, Boolean, Number, Object],\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: undefined,\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  id: {\n    type: String,\n    default: undefined,\n  },\n  controls: {\n    type: String,\n    default: undefined,\n  },\n  border: Boolean,\n  size: useSizeProp,\n  tabindex: [String, Number],\n}\n\nexport const useCheckboxGroup = () => {\n  const elForm = inject(formContextKey, {} as FormContext)\n  const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n  const checkboxGroup = inject<ICheckboxGroupInstance>('CheckboxGroup', {})\n  const isGroup = computed(\n    () => checkboxGroup && checkboxGroup?.name === 'ElCheckboxGroup'\n  )\n  const elFormItemSize = computed(() => {\n    return elFormItem.size\n  })\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem,\n  }\n}\n\nexport const useCheckboxGroupId = (\n  props: IUseCheckboxGroupProps,\n  { elFormItem }: Partial<ReturnType<typeof useCheckboxGroup>>\n) => {\n  const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n  })\n\n  return {\n    isLabeledByFormItem,\n    groupId,\n  }\n}\n\nconst useModel = (props: CheckboxProps) => {\n  const selfModel = ref<any>(false)\n  const { emit } = getCurrentInstance()!\n  const { isGroup, checkboxGroup, elFormItem } = useCheckboxGroup()\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup.max !== undefined &&\n          val.length > checkboxGroup.max.value\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val\n      }\n    },\n  })\n\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem,\n  }\n}\n\nconst useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  const { isGroup, checkboxGroup } = useCheckboxGroup()\n  const focus = ref(false)\n  const size = useSize(checkboxGroup?.checkboxGroupSize, { prop: true })\n  const isChecked = computed<boolean>(() => {\n    const value = model!.value\n    if (toTypeString(value) === '[object Boolean]') {\n      return value\n    } else if (Array.isArray(value)) {\n      return value.includes(props.label)\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxSize = useSize(\n    computed(() =>\n      isGroup.value ? checkboxGroup?.checkboxGroupSize?.value : undefined\n    )\n  )\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!(slots.default || props.label)\n  })\n\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize,\n    hasOwnLabel,\n  }\n}\n\nconst useDisabled = (\n  props: CheckboxProps,\n  {\n    model,\n    isChecked,\n  }: Partial<ReturnType<typeof useModel>> &\n    Partial<ReturnType<typeof useCheckboxStatus>>\n) => {\n  const { elForm, isGroup, checkboxGroup } = useCheckboxGroup()\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup.max?.value!\n    const min = checkboxGroup.min?.value!\n    return (\n      (!!(max || min) && model!.value.length >= max && !isChecked!.value) ||\n      (model!.value.length <= min && isChecked!.value)\n    )\n  })\n  const isDisabled = computed(() => {\n    const disabled = props.disabled || elForm?.disabled\n    return (\n      (isGroup.value\n        ? checkboxGroup.disabled?.value || disabled || isLimitDisabled.value\n        : disabled) ?? false\n    )\n  })\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nconst setStoreValue = (\n  props: CheckboxProps,\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  function addToStore() {\n    if (Array.isArray(model!.value) && !model!.value.includes(props.label)) {\n      model!.value.push(props.label)\n    } else {\n      model!.value = props.trueLabel || true\n    }\n  }\n  props.checked && addToStore()\n}\n\nconst useEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Partial<\n    ReturnType<typeof useModel> &\n      ReturnType<typeof useCheckboxStatus> &\n      ReturnType<typeof useDisabled> &\n      ReturnType<typeof useFormItemInputId>\n  >\n) => {\n  const { elFormItem } = useCheckboxGroup()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return value === props.trueLabel || value === true\n      ? props.trueLabel ?? true\n      : props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit('change', getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded!.value) return\n    const target = e.target as HTMLInputElement\n    emit('change', getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded!.value) return\n    if (\n      !hasOwnLabel!.value &&\n      !isDisabled!.value &&\n      isLabeledByFormItem!.value\n    ) {\n      model!.value = getLabeledValue(\n        [false, props.falseLabel].includes(model!.value)\n      )\n      await nextTick()\n      emitChangeEvent(model!.value, e)\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    () => {\n      elFormItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { model, isGroup, isLimitExceeded, elFormItem } = useModel(props)\n  const { focus, size, isChecked, checkboxSize, hasOwnLabel } =\n    useCheckboxStatus(props, slots, {\n      model,\n    })\n  const { isDisabled } = useDisabled(props, { model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  setStoreValue(props, { model })\n\n  return {\n    elFormItem,\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isGroup,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n    focus,\n    size,\n  }\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox>\n"]},"metadata":{},"sourceType":"module"}