{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, ref, reactive, watch, provide, createVNode, renderSlot } from 'vue';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport { Plus } from '@element-plus/icons-vue';\nimport '../../../tokens/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport TabNav from './tab-nav.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props2.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber } from '@vueuse/core';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs2.mjs';\nimport { EVENT_CODE } from '../../../constants/aria2.mjs';\nconst tabsProps = buildProps({\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  activeName: {\n    type: [String, Number],\n    default: \"\"\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: [\"top\", \"right\", \"bottom\", \"left\"],\n    default: \"top\"\n  },\n  beforeLeave: {\n    type: definePropType(Function),\n    default: () => true\n  },\n  stretch: Boolean\n});\n\nconst isPanelName = value => isString(value) || isNumber(value);\n\nconst tabsEmits = {\n  [UPDATE_MODEL_EVENT]: name => isPanelName(name),\n  \"tab-click\": (pane, ev) => ev instanceof Event,\n  \"tab-change\": name => isPanelName(name),\n  edit: (paneName, action) => [\"remove\", \"add\"].includes(action),\n  \"tab-remove\": name => isPanelName(name),\n  \"tab-add\": () => true\n};\nvar Tabs = defineComponent({\n  name: \"ElTabs\",\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, {\n    emit,\n    slots,\n    expose\n  }) {\n    const ns = useNamespace(\"tabs\");\n    const nav$ = ref();\n    const panes = reactive({});\n    const currentName = ref(props.modelValue || props.activeName || \"0\");\n\n    const changeCurrentName = value => {\n      currentName.value = value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"tab-change\", value);\n    };\n\n    const setCurrentName = async value => {\n      var _a, _b, _c;\n\n      if (currentName.value === value) return;\n\n      try {\n        const canLeave = await ((_a = props.beforeLeave) == null ? void 0 : _a.call(props, value, currentName.value));\n\n        if (canLeave !== false) {\n          changeCurrentName(value);\n          (_c = (_b = nav$.value) == null ? void 0 : _b.removeFocus) == null ? void 0 : _c.call(_b);\n        }\n      } catch (e) {}\n    };\n\n    const handleTabClick = (tab, tabName, event) => {\n      if (tab.props.disabled) return;\n      setCurrentName(tabName);\n      emit(\"tab-click\", tab, event);\n    };\n\n    const handleTabRemove = (pane, ev) => {\n      if (pane.props.disabled) return;\n      ev.stopPropagation();\n      emit(\"edit\", pane.props.name, \"remove\");\n      emit(\"tab-remove\", pane.props.name);\n    };\n\n    const handleTabAdd = () => {\n      emit(\"edit\", void 0, \"add\");\n      emit(\"tab-add\");\n    };\n\n    watch(() => props.activeName, modelValue => setCurrentName(modelValue));\n    watch(() => props.modelValue, modelValue => setCurrentName(modelValue));\n    watch(currentName, async () => {\n      var _a;\n\n      (_a = nav$.value) == null ? void 0 : _a.scrollToActiveTab();\n    });\n    {\n      const registerPane = pane => panes[pane.uid] = pane;\n\n      const unregisterPane = uid => delete panes[uid];\n\n      provide(tabsRootContextKey, {\n        props,\n        currentName,\n        registerPane,\n        unregisterPane\n      });\n    }\n    expose({\n      currentName\n    });\n    return () => {\n      const newButton = props.editable || props.addable ? createVNode(\"span\", {\n        \"class\": ns.e(\"new-tab\"),\n        \"tabindex\": \"0\",\n        \"onClick\": handleTabAdd,\n        \"onKeydown\": ev => {\n          if (ev.code === EVENT_CODE.enter) handleTabAdd();\n        }\n      }, [createVNode(ElIcon, {\n        \"class\": ns.is(\"icon-plus\")\n      }, {\n        default: () => [createVNode(Plus, null, null)]\n      })]) : null;\n      const header = createVNode(\"div\", {\n        \"class\": [ns.e(\"header\"), ns.is(props.tabPosition)]\n      }, [newButton, createVNode(TabNav, {\n        \"ref\": nav$,\n        \"currentName\": currentName.value,\n        \"editable\": props.editable,\n        \"type\": props.type,\n        \"panes\": Object.values(panes),\n        \"stretch\": props.stretch,\n        \"onTabClick\": handleTabClick,\n        \"onTabRemove\": handleTabRemove\n      }, null)]);\n      const panels = createVNode(\"div\", {\n        \"class\": ns.e(\"content\")\n      }, [renderSlot(slots, \"default\")]);\n      return createVNode(\"div\", {\n        \"class\": [ns.b(), ns.m(props.tabPosition), {\n          [ns.m(\"card\")]: props.type === \"card\",\n          [ns.m(\"border-card\")]: props.type === \"border-card\"\n        }]\n      }, [...(props.tabPosition !== \"bottom\" ? [header, panels] : [panels, header])]);\n    };\n  }\n\n});\nexport { Tabs as default, tabsEmits, tabsProps };","map":{"version":3,"mappings":"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","names":["tabsProps","buildProps","type","String","values","default","activeName","Number","closable","Boolean","addable","modelValue","editable","tabPosition","beforeLeave","definePropType","Function","stretch","tabsEmits","ev","name","edit","action","includes","isPanelName","defineComponent","props","emits","expose","slots","ns","nav$","currentName","reactive","value","emit","UPDATE_MODEL_EVENT","changeCurrentName","setCurrentName","_a","canLeave","e","event","handleTabClick","tab","handleTabAdd","handleTabRemove","stopPropagation","watch","registerPane","unregisterPane","header","newButton","_createVNode"],"sources":["../../../../../../packages/components/tabs/src/tabs.tsx"],"sourcesContent":["import { defineComponent, provide, reactive, ref, renderSlot, watch } from 'vue'\nimport {\n  buildProps,\n  definePropType,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport TabNav from './tab-nav'\nimport type { TabNavInstance } from './tab-nav'\nimport type { TabsPaneContext } from '@element-plus/tokens'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type TabPanelName = string | number\n\nexport const tabsProps = buildProps({\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  activeName: {\n    type: [String, Number],\n    default: '',\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  beforeLeave: {\n    type: definePropType<\n      (\n        newName: TabPanelName,\n        oldName: TabPanelName\n      ) => Awaitable<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\n\nconst isPanelName = (value: unknown): value is string | number =>\n  isString(value) || isNumber(value)\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (name: TabPanelName) => isPanelName(name),\n  'tab-click': (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  'tab-change': (name: TabPanelName) => isPanelName(name),\n  edit: (paneName: TabPanelName | undefined, action: 'remove' | 'add') =>\n    ['remove', 'add'].includes(action),\n  'tab-remove': (name: TabPanelName) => isPanelName(name),\n  'tab-add': () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nexport default defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const ns = useNamespace('tabs')\n\n    const nav$ = ref<TabNavInstance>()\n    const panes = reactive<Record<number, TabsPaneContext>>({})\n    const currentName = ref(props.modelValue || props.activeName || '0')\n\n    const changeCurrentName = (value: TabPanelName) => {\n      currentName.value = value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('tab-change', value)\n    }\n\n    const setCurrentName = async (value: TabPanelName) => {\n      // should do nothing.\n      if (currentName.value === value) return\n\n      try {\n        const canLeave = await props.beforeLeave?.(value, currentName.value)\n        if (canLeave !== false) {\n          changeCurrentName(value)\n\n          // call exposed function, Vue doesn't support expose in typescript yet.\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-expect-error\n          nav$.value?.removeFocus?.()\n        }\n      } catch {}\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: TabPanelName,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      setCurrentName(tabName)\n      emit('tab-click', tab, event)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tab-remove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', undefined, 'add')\n      emit('tab-add')\n    }\n\n    watch(\n      () => props.activeName,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      // call exposed function, Vue doesn't support expose in typescript yet.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      nav$.value?.scrollToActiveTab()\n    })\n\n    {\n      const registerPane = (pane: TabsPaneContext) => (panes[pane.uid] = pane)\n      const unregisterPane = (uid: number) => delete panes[uid]\n\n      provide(tabsRootContextKey, {\n        props,\n        currentName,\n        registerPane,\n        unregisterPane,\n      })\n    }\n\n    expose({\n      currentName,\n    })\n\n    return () => {\n      const newButton =\n        props.editable || props.addable ? (\n          <span\n            class={ns.e('new-tab')}\n            tabindex=\"0\"\n            onClick={handleTabAdd}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (ev.code === EVENT_CODE.enter) handleTabAdd()\n            }}\n          >\n            <ElIcon class={ns.is('icon-plus')}>\n              <Plus />\n            </ElIcon>\n          </span>\n        ) : null\n\n      const header = (\n        <div class={[ns.e('header'), ns.is(props.tabPosition)]}>\n          {newButton}\n          <TabNav\n            ref={nav$}\n            currentName={currentName.value}\n            editable={props.editable}\n            type={props.type}\n            panes={Object.values(panes)}\n            stretch={props.stretch}\n            onTabClick={handleTabClick}\n            onTabRemove={handleTabRemove}\n          />\n        </div>\n      )\n\n      const panels = (\n        <div class={ns.e('content')}>{renderSlot(slots, 'default')}</div>\n      )\n\n      return (\n        <div\n          class={[\n            ns.b(),\n            ns.m(props.tabPosition),\n            {\n              [ns.m('card')]: props.type === 'card',\n              [ns.m('border-card')]: props.type === 'border-card',\n            },\n          ]}\n        >\n          {...props.tabPosition !== 'bottom'\n            ? [header, panels]\n            : [panels, header]}\n        </div>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}