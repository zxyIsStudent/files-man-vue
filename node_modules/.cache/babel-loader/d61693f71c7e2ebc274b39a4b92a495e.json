{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { watch, nextTick, computed, toRefs } from 'vue';\nimport { isEqual, pick } from 'lodash-unified';\nimport '../../../constants/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport _Tree from '../../tree/index2.mjs';\nimport component from './tree-select-option2.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\n\nconst useTree = (props, {\n  attrs,\n  slots,\n  emit\n}, {\n  select,\n  tree,\n  key\n}) => {\n  watch(() => props.modelValue, () => {\n    if (props.showCheckbox) {\n      nextTick(() => {\n        const treeInstance = tree.value;\n\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props\n  }));\n\n  const getNodeValByProp = (prop, data) => {\n    var _a;\n\n    const propVal = propsMap.value[prop];\n\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n\n  return { ...pick(toRefs(props), Object.keys(_Tree.props)),\n    ...attrs,\n    nodeKey: key,\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly;\n    }),\n    defaultExpandedKeys: computed(() => {\n      const values = toValidArray(props.modelValue);\n      const parentKeys = tree.value ? values.map(item => {\n        var _a, _b, _c;\n\n        return (_c = (_b = (_a = tree.value) == null ? void 0 : _a.getNode(item)) == null ? void 0 : _b.parent) == null ? void 0 : _c.key;\n      }).filter(item => isValidValue(item)) : values;\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(parentKeys) : parentKeys;\n    }),\n    renderContent: (h, {\n      node,\n      data,\n      store\n    }) => {\n      return h(component, {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? () => props.renderContent(h, {\n        node,\n        data,\n        store\n      }) : slots.default ? () => slots.default({\n        node,\n        data,\n        store\n      }) : void 0);\n    },\n    filterNodeMethod: (value, data, node) => {\n      var _a;\n\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: (data, node, e) => {\n      var _a, _b, _c;\n\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n\n      if ((props.checkStrictly ? props.showCheckbox ? props.checkOnClickNode : props.checkStrictly : props.checkStrictly) || node.isLeaf) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);\n        }\n      } else {\n        e.proxy.handleExpandIconClick();\n      }\n    },\n    onCheck: (data, params) => {\n      var _a, _b;\n\n      (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);\n      const checkedKeys = !props.checkStrictly ? (_b = tree.value) == null ? void 0 : _b.getCheckedKeys(true) : params.checkedKeys;\n      const value = getNodeValByProp(\"value\", data);\n      emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(value) ? value : void 0);\n    }\n  };\n};\n\nfunction isValidValue(val) {\n  return val || val === 0;\n}\n\nfunction toValidArray(val) {\n  return Array.isArray(val) ? val : isValidValue(val) ? [val] : [];\n}\n\nexport { useTree };","map":{"version":3,"mappings":"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","names":["useTree","props","attrs","slots","emit","select","tree","key","watch","modelValue","showCheckbox","nextTick","treeInstance","value","isEqual","getCheckedKeys","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","getNodeValByProp","prop","data","_a","propVal","isFunction","getNode","pick","toRefs","Object","keys","ElTree","nodeKey","expandOnClickNode","checkStrictly","defaultExpandedKeys","values","parentKeys","map","item","_b","_c","parent","filter","isValidValue","concat","renderContent","h","node","store","TreeSelectOption","label","disabled","default","filterNodeMethod","includes","onNodeClick","e","call","checkOnClickNode","isLeaf","option","options","get","handleOptionSelect","proxy","handleExpandIconClick","onCheck","params","checkedKeys","UPDATE_MODEL_EVENT","multiple","val","Array","isArray"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["import { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<InstanceType<typeof ElTree> | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n\n    // only expand on click node when the `check-strictly` is false\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly\n    }),\n\n    // auto expand selected parent node\n    defaultExpandedKeys: computed(() => {\n      const values = toValidArray(props.modelValue)\n      const parentKeys = tree.value\n        ? values\n            .map((item) => tree.value?.getNode(item)?.parent?.key)\n            .filter((item) => isValidValue(item))\n        : values\n      return props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(parentKeys)\n        : parentKeys\n    }),\n\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      return getNodeValByProp('label', data)?.includes(value)\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      if (\n        (props.checkStrictly\n          ? props.showCheckbox\n            ? props.checkOnClickNode\n            : props.checkStrictly\n          : props.checkStrictly) ||\n        node.isLeaf\n      ) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option, true)\n        }\n      } else {\n        e.proxy.handleExpandIconClick()\n      }\n    },\n    onCheck: (data, params) => {\n      attrs.onCheck?.(data, params)\n\n      // remove folder node when `checkStrictly` is false\n      const checkedKeys = !props.checkStrictly\n        ? tree.value?.getCheckedKeys(true)\n        : params.checkedKeys\n\n      const value = getNodeValByProp('value', data)\n      emit(\n        UPDATE_MODEL_EVENT,\n        props.multiple\n          ? checkedKeys\n          : checkedKeys.includes(value)\n          ? value\n          : undefined\n      )\n    },\n  }\n}\n\nfunction isValidValue(val: any) {\n  return val || val === 0\n}\n\nfunction toValidArray(val: any) {\n  return Array.isArray(val) ? val : isValidValue(val) ? [val] : []\n}\n"]},"metadata":{},"sourceType":"module"}