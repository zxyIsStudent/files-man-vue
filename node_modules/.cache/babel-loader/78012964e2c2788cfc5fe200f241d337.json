{"ast":null,"code":"import { defineComponent, computed, ref, unref, toRef, provide, readonly, watch, resolveComponent, openBlock, createBlock, withCtx, createVNode, renderSlot, createCommentVNode, createElementBlock, toDisplayString } from 'vue';\nimport { ElPopper } from '../../popper/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport ElTooltipContent from './content2.mjs';\nimport ElTooltipTrigger from './trigger2.mjs';\nimport { useTooltipContentProps, useTooltipTriggerProps, useTooltipProps } from './tooltip3.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { createModelToggleComposable } from '../../../hooks/use-model-toggle/index2.mjs';\nimport ElPopperArrow from '../../popper/src/arrow4.mjs';\nimport { usePopperProps } from '../../popper/src/popper3.mjs';\nimport { usePopperArrowProps } from '../../popper/src/arrow3.mjs';\nimport { usePopperContainer } from '../../../hooks/use-popper-container/index2.mjs';\nimport { isUndefined } from '../../../utils/types2.mjs';\nimport { debugWarn } from '../../../utils/error2.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { useId } from '../../../hooks/use-id/index2.mjs';\nimport { useDelayedToggle } from '../../../hooks/use-delayed-toggle/index2.mjs';\nconst {\n  useModelToggleProps,\n  useModelToggle,\n  useModelToggleEmits\n} = createModelToggleComposable(\"visible\");\n\nconst _sfc_main = defineComponent({\n  name: \"ElTooltip\",\n  components: {\n    ElPopper,\n    ElPopperArrow,\n    ElTooltipContent,\n    ElTooltipTrigger\n  },\n  props: { ...usePopperProps,\n    ...useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps\n  },\n  emits: [...useModelToggleEmits, \"before-show\", \"before-hide\", \"show\", \"hide\", \"open\", \"close\"],\n\n  setup(props, {\n    emit\n  }) {\n    usePopperContainer();\n    const compatShowAfter = computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\"ElTooltip\", \"open-delay is about to be deprecated in the next major version, please use `show-after` instead\");\n      }\n\n      return props.openDelay || props.showAfter;\n    });\n    const compatShowArrow = computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\"ElTooltip\", \"`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead\");\n      }\n\n      return isBoolean(props.visibleArrow) ? props.visibleArrow : props.showArrow;\n    });\n    const id = useId();\n    const popperRef = ref(null);\n    const contentRef = ref(null);\n\n    const updatePopper = () => {\n      var _a;\n\n      const popperComponent = unref(popperRef);\n\n      if (popperComponent) {\n        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();\n      }\n    };\n\n    const open = ref(false);\n    const {\n      show,\n      hide\n    } = useModelToggle({\n      indicator: open\n    });\n    const {\n      onOpen,\n      onClose\n    } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, \"hideAfter\"),\n      open: show,\n      close: hide\n    });\n    const controlled = computed(() => isBoolean(props.visible));\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: readonly(open),\n      trigger: toRef(props, \"trigger\"),\n      onOpen: () => {\n        onOpen();\n      },\n      onClose: () => {\n        onClose();\n      },\n      onToggle: () => {\n        if (unref(open)) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      },\n      onShow: () => {\n        emit(\"show\");\n      },\n      onHide: () => {\n        emit(\"hide\");\n      },\n      onBeforeShow: () => {\n        emit(\"before-show\");\n      },\n      onBeforeHide: () => {\n        emit(\"before-hide\");\n      },\n      updatePopper\n    });\n    watch(() => props.disabled, disabled => {\n      if (disabled && open.value) {\n        open.value = false;\n      }\n    });\n\n    const isFocusInsideContent = () => {\n      var _a, _b;\n\n      const popperContent = (_b = (_a = contentRef.value) == null ? void 0 : _a.contentRef) == null ? void 0 : _b.popperContentRef;\n      return popperContent && popperContent.contains(document.activeElement);\n    };\n\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      contentRef,\n      open,\n      hide,\n      isFocusInsideContent,\n      updatePopper,\n      onOpen,\n      onClose\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"innerHTML\"];\nconst _hoisted_2 = {\n  key: 1\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip_trigger = resolveComponent(\"el-tooltip-trigger\");\n\n  const _component_el_popper_arrow = resolveComponent(\"el-popper-arrow\");\n\n  const _component_el_tooltip_content = resolveComponent(\"el-tooltip-content\");\n\n  const _component_el_popper = resolveComponent(\"el-popper\");\n\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popperRef\",\n    role: _ctx.role\n  }, {\n    default: withCtx(() => [createVNode(_component_el_tooltip_trigger, {\n      disabled: _ctx.disabled,\n      trigger: _ctx.trigger,\n      \"virtual-ref\": _ctx.virtualRef,\n      \"virtual-triggering\": _ctx.virtualTriggering\n    }, {\n      default: withCtx(() => [_ctx.$slots.default ? renderSlot(_ctx.$slots, \"default\", {\n        key: 0\n      }) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 8, [\"disabled\", \"trigger\", \"virtual-ref\", \"virtual-triggering\"]), createVNode(_component_el_tooltip_content, {\n      ref: \"contentRef\",\n      \"aria-label\": _ctx.ariaLabel,\n      \"boundaries-padding\": _ctx.boundariesPadding,\n      content: _ctx.content,\n      disabled: _ctx.disabled,\n      effect: _ctx.effect,\n      enterable: _ctx.enterable,\n      \"fallback-placements\": _ctx.fallbackPlacements,\n      \"hide-after\": _ctx.hideAfter,\n      \"gpu-acceleration\": _ctx.gpuAcceleration,\n      offset: _ctx.offset,\n      persistent: _ctx.persistent,\n      \"popper-class\": _ctx.popperClass,\n      \"popper-style\": _ctx.popperStyle,\n      placement: _ctx.placement,\n      \"popper-options\": _ctx.popperOptions,\n      pure: _ctx.pure,\n      \"raw-content\": _ctx.rawContent,\n      \"reference-el\": _ctx.referenceEl,\n      \"show-after\": _ctx.compatShowAfter,\n      strategy: _ctx.strategy,\n      teleported: _ctx.teleported,\n      transition: _ctx.transition,\n      \"virtual-triggering\": _ctx.virtualTriggering,\n      \"z-index\": _ctx.zIndex,\n      \"append-to\": _ctx.appendTo\n    }, {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"content\", {}, () => [_ctx.rawContent ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        innerHTML: _ctx.content\n      }, null, 8, _hoisted_1)) : (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.content), 1))]), _ctx.compatShowArrow ? (openBlock(), createBlock(_component_el_popper_arrow, {\n        key: 0,\n        \"arrow-offset\": _ctx.arrowOffset\n      }, null, 8, [\"arrow-offset\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 8, [\"aria-label\", \"boundaries-padding\", \"content\", \"disabled\", \"effect\", \"enterable\", \"fallback-placements\", \"hide-after\", \"gpu-acceleration\", \"offset\", \"persistent\", \"popper-class\", \"popper-style\", \"placement\", \"popper-options\", \"pure\", \"raw-content\", \"reference-el\", \"show-after\", \"strategy\", \"teleported\", \"transition\", \"virtual-triggering\", \"z-index\", \"append-to\"])]),\n    _: 3\n  }, 8, [\"role\"]);\n}\n\nvar Tooltip = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/tooltip.vue\"]]);\n\nexport { Tooltip as default };","map":{"version":3,"mappings":"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","names":["useModelToggleProps","useModelToggle","useModelToggleEmits","createModelToggleComposable","_sfc_main","defineComponent","name","components","ElPopper","ElPopperArrow","ElTooltipContent","ElTooltipTrigger","props","emits","setup","emit","usePopperContainer","computed","isUndefined","debugWarn","openDelay","isBoolean","visibleArrow","id","useId","ref","updatePopper","popperComponent","show","hide","indicator","onOpen","onClose","showAfter","compatShowAfter","hideAfter","open","close","provide","controlled","trigger","toRef","onToggle","onShow","onHide","onBeforeShow","onBeforeHide","watch","disabled","_b","compatShowArrow","popperRef","contentRef","isFocusInsideContent","_component_el_popper","_openBlock","default","_ctx","_","_createVNode","content","effect","enterable","offset","persistent","placement","pure","strategy","teleported","transition","appendTo","_renderSlot","key","innerHTML","_hoisted_1"],"sources":["../../../../../../packages/components/tooltip/src/tooltip.vue"],"sourcesContent":["<template>\n  <el-popper ref=\"popperRef\" :role=\"role\">\n    <el-tooltip-trigger\n      :disabled=\"disabled\"\n      :trigger=\"trigger\"\n      :virtual-ref=\"virtualRef\"\n      :virtual-triggering=\"virtualTriggering\"\n    >\n      <slot v-if=\"$slots.default\" />\n    </el-tooltip-trigger>\n    <el-tooltip-content\n      ref=\"contentRef\"\n      :aria-label=\"ariaLabel\"\n      :boundaries-padding=\"boundariesPadding\"\n      :content=\"content\"\n      :disabled=\"disabled\"\n      :effect=\"effect\"\n      :enterable=\"enterable\"\n      :fallback-placements=\"fallbackPlacements\"\n      :hide-after=\"hideAfter\"\n      :gpu-acceleration=\"gpuAcceleration\"\n      :offset=\"offset\"\n      :persistent=\"persistent\"\n      :popper-class=\"popperClass\"\n      :popper-style=\"popperStyle\"\n      :placement=\"placement\"\n      :popper-options=\"popperOptions\"\n      :pure=\"pure\"\n      :raw-content=\"rawContent\"\n      :reference-el=\"referenceEl\"\n      :show-after=\"compatShowAfter\"\n      :strategy=\"strategy\"\n      :teleported=\"teleported\"\n      :transition=\"transition\"\n      :virtual-triggering=\"virtualTriggering\"\n      :z-index=\"zIndex\"\n      :append-to=\"appendTo\"\n    >\n      <slot name=\"content\">\n        <span v-if=\"rawContent\" v-html=\"content\" />\n        <span v-else>{{ content }}</span>\n      </slot>\n      <el-popper-arrow v-if=\"compatShowArrow\" :arrow-offset=\"arrowOffset\" />\n    </el-tooltip-content>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  provide,\n  readonly,\n  ref,\n  toRef,\n  unref,\n  watch,\n} from 'vue'\nimport {\n  ElPopper,\n  ElPopperArrow,\n  usePopperArrowProps,\n  usePopperProps,\n} from '@element-plus/components/popper'\n\nimport { debugWarn, isBoolean, isUndefined } from '@element-plus/utils'\nimport {\n  createModelToggleComposable,\n  useDelayedToggle,\n  useId,\n  usePopperContainer,\n} from '@element-plus/hooks'\nimport ElTooltipContent from './content.vue'\nimport ElTooltipTrigger from './trigger.vue'\nimport {\n  useTooltipContentProps,\n  useTooltipProps,\n  useTooltipTriggerProps,\n} from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nconst { useModelToggleProps, useModelToggle, useModelToggleEmits } =\n  createModelToggleComposable('visible' as const)\n\nexport default defineComponent({\n  name: 'ElTooltip',\n  components: {\n    ElPopper,\n    ElPopperArrow,\n    ElTooltipContent,\n    ElTooltipTrigger,\n  },\n  props: {\n    ...usePopperProps,\n    ...useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps,\n  },\n  emits: [\n    ...useModelToggleEmits,\n    'before-show',\n    'before-hide',\n    'show',\n    'hide',\n    'open',\n    'close',\n  ],\n  setup(props, { emit }) {\n    usePopperContainer()\n    const compatShowAfter = computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\n          'ElTooltip',\n          'open-delay is about to be deprecated in the next major version, please use `show-after` instead'\n        )\n      }\n      return props.openDelay || (props.showAfter as number)\n    })\n    const compatShowArrow = computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\n          'ElTooltip',\n          '`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead'\n        )\n      }\n      return isBoolean(props.visibleArrow)\n        ? props.visibleArrow\n        : props.showArrow\n    })\n\n    const id = useId()\n    const popperRef = ref<InstanceType<typeof ElPopper> | null>(null)\n    const contentRef = ref<InstanceType<typeof ElTooltipContent> | null>(null)\n\n    const updatePopper = () => {\n      const popperComponent = unref(popperRef)\n      if (popperComponent) {\n        popperComponent.popperInstanceRef?.update()\n      }\n    }\n    const open = ref(false)\n\n    const { show, hide } = useModelToggle({\n      indicator: open,\n    })\n\n    const { onOpen, onClose } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, 'hideAfter'),\n      open: show,\n      close: hide,\n    })\n\n    const controlled = computed(() => isBoolean(props.visible))\n\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: readonly(open),\n      trigger: toRef(props, 'trigger'),\n      onOpen: () => {\n        onOpen()\n      },\n      onClose: () => {\n        onClose()\n      },\n      onToggle: () => {\n        if (unref(open)) {\n          onClose()\n        } else {\n          onOpen()\n        }\n      },\n      onShow: () => {\n        emit('show')\n      },\n      onHide: () => {\n        emit('hide')\n      },\n      onBeforeShow: () => {\n        emit('before-show')\n      },\n      onBeforeHide: () => {\n        emit('before-hide')\n      },\n      updatePopper,\n    })\n\n    watch(\n      () => props.disabled,\n      (disabled) => {\n        if (disabled && open.value) {\n          open.value = false\n        }\n      }\n    )\n\n    const isFocusInsideContent = () => {\n      const popperContent: HTMLElement | undefined =\n        contentRef.value?.contentRef?.popperContentRef\n      return popperContent && popperContent.contains(document.activeElement)\n    }\n\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      contentRef,\n      open,\n      hide,\n      isFocusInsideContent,\n      updatePopper,\n      onOpen,\n      onClose,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}