{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, inject, ref, computed, h, withCtx, renderSlot, withKeys, withModifiers } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index2.mjs';\nimport '../../virtual-list/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport GroupItem from './group-item2.mjs';\nimport OptionItem from './option-item2.mjs';\nimport { selectV2InjectionKey } from './token2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { isUndefined } from '../../../utils/types2.mjs';\nimport { isObject } from '@vue/shared';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list2.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list2.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number\n  },\n\n  setup(props) {\n    const select = inject(selectV2InjectionKey);\n    const ns = useNamespace(\"select\");\n    const cachedHeights = ref([]);\n    const listRef = ref(null);\n    const isSized = computed(() => isUndefined(select.props.estimatedOptionHeight));\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n\n      return arr && arr.some(item => {\n        return get(item, valueKey) === get(target, valueKey);\n      });\n    };\n\n    const isEqual = (selected, target) => {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n\n    const isItemSelected = (modelValue, target) => {\n      const {\n        valueKey\n      } = select.props;\n\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey));\n      }\n\n      return isEqual(modelValue, get(target, valueKey));\n    };\n\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n\n    const isItemHovering = target => props.hoveringIndex === target;\n\n    const scrollToItem = index => {\n      const list = listRef.value;\n\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n\n    const resetScrollTop = () => {\n      const list = listRef.value;\n\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n\n    return {\n      ns,\n      select,\n      listProps,\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    };\n  },\n\n  render(_ctx, _cache) {\n    var _a;\n\n    const {\n      $slots,\n      data,\n      listProps,\n      select,\n      isSized,\n      width,\n      ns,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected\n    } = _ctx;\n    const Comp = isSized ? FixedSizeList : DynamicSizeList;\n    const {\n      props: selectProps,\n      onSelect,\n      onHover,\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n    const {\n      height,\n      modelValue,\n      multiple\n    } = selectProps;\n\n    if (data.length === 0) {\n      return h(\"div\", {\n        class: ns.b(\"dropdown\"),\n        style: {\n          width: `${width}px`\n        }\n      }, (_a = $slots.empty) == null ? void 0 : _a.call($slots));\n    }\n\n    const ListItem = withCtx(scoped => {\n      const {\n        index,\n        data: data2\n      } = scoped;\n      const item = data2[index];\n\n      if (data2[index].type === \"Group\") {\n        return h(GroupItem, {\n          item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize\n        });\n      }\n\n      const selected = isItemSelected(modelValue, item);\n      const itemDisabled = isItemDisabled(modelValue, selected);\n      return h(OptionItem, { ...scoped,\n        selected,\n        disabled: item.disabled || itemDisabled,\n        created: !!item.created,\n        hovering: isItemHovering(index),\n        item,\n        onSelect,\n        onHover\n      }, {\n        default: withCtx(props => {\n          return renderSlot($slots, \"default\", props, () => [h(\"span\", item.label)]);\n        })\n      });\n    });\n    const List = h(Comp, {\n      ref: \"listRef\",\n      className: ns.be(\"dropdown\", \"list\"),\n      data,\n      height,\n      width,\n      total: data.length,\n      scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n      onKeydown: [_cache[1] || (_cache[1] = withKeys(withModifiers(() => onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[2] || (_cache[2] = withKeys(withModifiers(() => onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[3] || (_cache[3] = withKeys(withModifiers(onKeyboardSelect, [\"stop\", \"prevent\"]), [\"enter\"])), _cache[4] || (_cache[4] = withKeys(withModifiers(() => select.expanded = false, [\"stop\", \"prevent\"]), [\"esc\"])), _cache[5] || (_cache[5] = withKeys(() => select.expanded = false, [\"tab\"]))],\n      ...listProps\n    }, {\n      default: ListItem\n    });\n    return h(\"div\", {\n      class: [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)]\n    }, [List]);\n  }\n\n});\n\nvar ElSelectMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/select-dropdown.vue\"]]);\n\nexport { ElSelectMenu as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","data","hoveringIndex","width","setup","inject","selectV2InjectionKey","useNamespace","ref","isSized","computed","isUndefined","select","estimatedOptionHeight","value","itemSize","itemHeight","estimatedSize","idx","cachedHeights","contains","arr","target","valueKey","isObject","includes","some","item","get","selected","modelValue","multiple","isEqual","disabled","multipleLimit","length","isItemHovering","index","list","listRef","scrollToItem","resetScrollTop","ns","listProps","isItemDisabled","isItemSelected","render","_ctx","_cache","$slots","onSelect","onHover","onKeyboardNavigate","onKeyboardSelect","height","selectProps","class","style","withCtx","scoped","data2","type","itemDisabled","created","hovering","default","renderSlot","h","List","className","total","scrollbarAlwaysOn","onKeydown","withKeys","withModifiers"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  h,\n  inject,\n  ref,\n  renderSlot,\n  withCtx,\n  withKeys,\n  withModifiers,\n} from 'vue'\nimport { get } from 'lodash-unified'\nimport { isObject, isUndefined } from '@element-plus/utils'\nimport {\n  DynamicSizeList,\n  FixedSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { Option, OptionItemProps } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props) {\n    const select = inject(selectV2InjectionKey) as any\n    const ns = useNamespace('select')\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref(null)\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return get(item, valueKey) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      const { valueKey } = select.props\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey))\n      }\n      return isEqual(modelValue, get(target, valueKey))\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    // computed\n    return {\n      ns,\n      select,\n      listProps,\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n\n      scrollToItem,\n      resetScrollTop,\n    }\n  },\n\n  render(_ctx, _cache) {\n    const {\n      $slots,\n\n      data,\n      listProps,\n      select,\n      isSized,\n      width,\n      ns,\n      // methods\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n    } = _ctx\n\n    const Comp = isSized ? FixedSizeList : DynamicSizeList\n\n    const {\n      props: selectProps,\n      onSelect,\n      onHover,\n      onKeyboardNavigate,\n      onKeyboardSelect,\n    } = select\n    const { height, modelValue, multiple } = selectProps\n\n    if (data.length === 0) {\n      return h(\n        'div',\n        {\n          class: ns.b('dropdown'),\n          style: {\n            width: `${width}px`,\n          },\n        },\n        $slots.empty?.()\n      )\n    }\n\n    const ListItem = withCtx((scoped: ItemProps<any>) => {\n      const { index, data } = scoped\n      const item = data[index]\n      // render group item which is not selectable.\n      if (data[index].type === 'Group') {\n        return h(GroupItem, {\n          item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize,\n        })\n      }\n\n      const selected = isItemSelected(modelValue, item)\n      const itemDisabled = isItemDisabled(modelValue, selected)\n      // render option item which is selectable\n      return h(\n        OptionItem,\n        {\n          ...scoped,\n          selected,\n          disabled: item.disabled || itemDisabled,\n          created: !!item.created,\n          hovering: isItemHovering(index),\n          item,\n          onSelect,\n          onHover,\n        },\n        {\n          default: withCtx((props: OptionItemProps) => {\n            return renderSlot($slots, 'default', props, () => [\n              h('span', item.label),\n            ])\n          }),\n        }\n      )\n    })\n\n    const List = h(\n      Comp,\n      {\n        ref: 'listRef', // forwarded ref so that select can access the list directly\n        className: ns.be('dropdown', 'list'),\n        data,\n        height,\n        width,\n        total: data.length,\n        scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n        onKeydown: [\n          _cache[1] ||\n            (_cache[1] = withKeys(\n              withModifiers(\n                () => onKeyboardNavigate('forward'),\n                ['stop', 'prevent']\n              ),\n              ['down']\n            )),\n          _cache[2] ||\n            (_cache[2] = withKeys(\n              withModifiers(\n                () => onKeyboardNavigate('backward'),\n                ['stop', 'prevent']\n              ),\n              ['up']\n            )),\n          _cache[3] ||\n            (_cache[3] = withKeys(\n              withModifiers(onKeyboardSelect, ['stop', 'prevent']),\n              ['enter']\n            )),\n\n          _cache[4] ||\n            (_cache[4] = withKeys(\n              withModifiers(\n                () => (select.expanded = false),\n                ['stop', 'prevent']\n              ),\n              ['esc']\n            )),\n          _cache[5] ||\n            (_cache[5] = withKeys(() => (select.expanded = false), ['tab'])),\n          // _cache[6] || (_cache[6] = () => {\n          //   console.log(11)\n          // }),\n        ],\n        ...listProps,\n      },\n      {\n        default: ListItem,\n      }\n    )\n    return h(\n      'div',\n      {\n        class: [ns.b('dropdown'), ns.is('multiple', multiple)],\n      },\n      [List]\n    )\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}