{"ast":null,"code":"import { defineComponent, ref, computed, watch, nextTick, openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, withKeys, withModifiers, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index2.mjs';\nimport '../../../time-picker/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../../time-picker/src/common/date-utils2.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { castArray } from '../../../../utils/arrays2.mjs';\nimport { hasClass } from '../../../../utils/dom/style2.mjs';\n\nconst datesInMonth = (year, month, lang) => {\n  const firstDay = dayjs().locale(lang).startOf(\"month\").month(month).year(year);\n  const numOfDays = firstDay.daysInMonth();\n  return rangeArr(numOfDays).map(n => firstDay.add(n, \"day\").toDate());\n};\n\nconst _sfc_main = defineComponent({\n  props: {\n    disabledDate: {\n      type: Function\n    },\n    selectionMode: {\n      type: String,\n      default: \"month\"\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    date: {\n      type: Object\n    },\n    parsedValue: {\n      type: Object\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n  expose: [\"focus\"],\n\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const tbodyRef = ref();\n    const currentCellRef = ref();\n    const months = ref(props.date.locale(\"en\").localeData().monthsShort().map(_ => _.toLowerCase()));\n    const tableRows = ref([[], [], []]);\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const rows = computed(() => {\n      var _a;\n\n      const rows2 = tableRows.value;\n      const now = dayjs().locale(lang.value).startOf(\"month\");\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows2[i];\n\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j];\n\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n\n          cell.type = \"normal\";\n          const index = i * 4 + j;\n          const calTime = props.date.startOf(\"year\").month(index);\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"month\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"month\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"month\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"month\");\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"month\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"month\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"month\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"month\");\n          }\n\n          const isToday = now.isSame(calTime);\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          cell.text = index;\n          const cellDate = calTime.toDate();\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          row[j] = cell;\n        }\n      }\n\n      return rows2;\n    });\n    watch(() => props.date, async () => {\n      var _a, _b;\n\n      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {\n        await nextTick();\n        (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n      }\n    });\n\n    const focus = () => {\n      var _a;\n\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n\n    const getCellStyle = cell => {\n      const style = {};\n      const year = props.date.year();\n      const today = new Date();\n      const month = cell.text;\n      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;\n      style.current = castArray(props.parsedValue).findIndex(date => date.year() === year && date.month() === month) >= 0;\n      style.today = today.getFullYear() === year && today.getMonth() === month;\n\n      if (cell.inRange) {\n        style[\"in-range\"] = true;\n\n        if (cell.start) {\n          style[\"start-date\"] = true;\n        }\n\n        if (cell.end) {\n          style[\"end-date\"] = true;\n        }\n      }\n\n      return style;\n    };\n\n    const isSelectedCell = cell => {\n      const year = props.date.year();\n      const month = cell.text;\n      return castArray(props.date).findIndex(date => date.year() === year && date.month() === month) >= 0;\n    };\n\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: props.date.startOf(\"year\").month(row * 4 + column)\n        });\n      }\n    };\n\n    const handleMonthTableClick = event => {\n      let target = event.target;\n      target = target == null ? void 0 : target.closest(\"td\");\n      if ((target == null ? void 0 : target.tagName) !== \"TD\") return;\n      if (hasClass(target, \"disabled\")) return;\n      const column = target.cellIndex;\n      const row = target.parentNode.rowIndex;\n      const month = row * 4 + column;\n      const newDate = props.date.startOf(\"year\").month(month);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          ctx.emit(\"select\", false);\n        }\n      } else {\n        ctx.emit(\"pick\", month);\n      }\n    };\n\n    return {\n      tbodyRef,\n      currentCellRef,\n      handleMouseMove,\n      handleMonthTableClick,\n      focus,\n      isSelectedCell,\n      rows,\n      getCellStyle,\n      t,\n      months\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  ref: \"tbodyRef\"\n};\nconst _hoisted_3 = [\"aria-selected\", \"aria-label\", \"tabindex\"];\nconst _hoisted_4 = {\n  class: \"cell\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    role: \"grid\",\n    \"aria-label\": _ctx.t(\"el.datepicker.monthTablePrompt\"),\n    class: \"el-month-table\",\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleMonthTableClick && _ctx.handleMonthTableClick(...args)),\n    onMousemove: _cache[3] || (_cache[3] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        ref_for: true,\n        ref: el => _ctx.isSelectedCell(cell) && (_ctx.currentCellRef = el),\n        class: normalizeClass(_ctx.getCellStyle(cell)),\n        \"aria-selected\": `${_ctx.isSelectedCell(cell)}`,\n        \"aria-label\": _ctx.t(`el.datepicker.month${+cell.text + 1}`),\n        tabindex: _ctx.isSelectedCell(cell) ? 0 : -1,\n        onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers((...args) => _ctx.handleMonthTableClick && _ctx.handleMonthTableClick(...args), [\"prevent\", \"stop\"]), [\"space\"])), _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => _ctx.handleMonthTableClick && _ctx.handleMonthTableClick(...args), [\"prevent\", \"stop\"]), [\"enter\"]))]\n      }, [createElementVNode(\"div\", null, [createElementVNode(\"span\", _hoisted_4, toDisplayString(_ctx.t(\"el.datepicker.months.\" + _ctx.months[cell.text])), 1)])], 42, _hoisted_3);\n    }), 128))]);\n  }), 128))], 512)], 40, _hoisted_1);\n}\n\nvar MonthTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue\"]]);\n\nexport { MonthTable as default };","map":{"version":3,"mappings":"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","names":["datesInMonth","year","month","lang","firstDay","locale","startOf","daysInMonth","rangeArr","map","n","toDate","_sfc_main","defineComponent","props","disabledDate","type","selectionMode","default","minDate","maxDate","date","parsedValue","rangeState","endDate","selecting","emits","expose","setup","ctx","t","useLocale","tbodyRef","ref","currentCellRef","months","localeData","monthsShort","_","computed","dayjs","i","rows2","j","cell","row","column","inRange","start","end","index","calTime","calEndDate","_a","isToday","cellDate","disabled","watch","_b","style","today","Date","castArray","findIndex","handleMouseMove","tagName","target","parentNode","lastRow","lastColumn","value","handleMonthTableClick","rowIndex","focus","isSelectedCell","rows","getCellStyle","_hoisted_4","class","_ctx","_cache","$props","$setup","$data","$options","_openBlock","role","onClick","onMousemove","_createElementVNode","_hoisted_2","key","ref_for","el","_normalizeClass","tabindex","onKeydown","_createElementBlock"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    role=\"grid\"\n    :aria-label=\"t('el.datepicker.monthTablePrompt')\"\n    class=\"el-month-table\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody ref=\"tbodyRef\">\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td\n          v-for=\"(cell, key_) in row\"\n          :key=\"key_\"\n          :ref=\"(el) => isSelectedCell(cell) && (currentCellRef = el)\"\n          :class=\"getCellStyle(cell)\"\n          :aria-selected=\"`${isSelectedCell(cell)}`\"\n          :aria-label=\"t(`el.datepicker.month${+cell.text + 1}`)\"\n          :tabindex=\"isSelectedCell(cell) ? 0 : -1\"\n          @keydown.space.prevent.stop=\"handleMonthTableClick\"\n          @keydown.enter.prevent.stop=\"handleMonthTableClick\"\n        >\n          <div>\n            <span class=\"cell\">\n              {{ t('el.datepicker.months.' + months[cell.text]) }}\n            </span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, nextTick, ref, watch } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nexport default defineComponent({\n  props: {\n    disabledDate: {\n      type: Function as PropType<(_: Date) => void>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'month',\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: Object as PropType<Dayjs>,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n\n  emits: ['changerange', 'pick', 'select'],\n  expose: ['focus'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const tbodyRef = ref<HTMLElement>()\n    const currentCellRef = ref<HTMLElement>()\n    const months = ref(\n      props.date\n        .locale('en')\n        .localeData()\n        .monthsShort()\n        .map((_) => _.toLowerCase())\n    )\n    const tableRows = ref([[], [], []])\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const rows = tableRows.value\n      const now = dayjs().locale(lang.value).startOf('month')\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows[i]\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n\n          cell.type = 'normal'\n\n          const index = i * 4 + j\n          const calTime = props.date.startOf('year').month(index)\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'month')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'month'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'month')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'month')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'month')\n          }\n\n          const isToday = now.isSame(calTime)\n          if (isToday) {\n            cell.type = 'today'\n          }\n\n          cell.text = index\n          const cellDate = calTime.toDate()\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          row[j] = cell\n        }\n      }\n      return rows\n    })\n\n    watch(\n      () => props.date,\n      async () => {\n        if (tbodyRef.value?.contains(document.activeElement)) {\n          await nextTick()\n          currentCellRef.value?.focus()\n        }\n      }\n    )\n\n    const focus = () => {\n      currentCellRef.value?.focus()\n    }\n\n    const getCellStyle = (cell) => {\n      const style = {} as any\n      const year = props.date.year()\n      const today = new Date()\n      const month = cell.text\n\n      style.disabled = props.disabledDate\n        ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n        : false\n      style.current =\n        castArray(props.parsedValue).findIndex(\n          (date) => date.year() === year && date.month() === month\n        ) >= 0\n      style.today = today.getFullYear() === year && today.getMonth() === month\n\n      if (cell.inRange) {\n        style['in-range'] = true\n\n        if (cell.start) {\n          style['start-date'] = true\n        }\n\n        if (cell.end) {\n          style['end-date'] = true\n        }\n      }\n      return style\n    }\n\n    const isSelectedCell = (cell) => {\n      const year = props.date.year()\n      const month = cell.text\n      return (\n        castArray(props.date).findIndex(\n          (date) => date.year() === year && date.month() === month\n        ) >= 0\n      )\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex\n      const column = target.cellIndex\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: props.date.startOf('year').month(row * 4 + column),\n        })\n      }\n    }\n    const handleMonthTableClick = (event) => {\n      let target = event.target\n      target = target?.closest('td')\n      if (target?.tagName !== 'TD') return\n      if (hasClass(target, 'disabled')) return\n      const column = target.cellIndex\n      const row = target.parentNode.rowIndex\n      const month = row * 4 + column\n      const newDate = props.date.startOf('year').month(month)\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else {\n        ctx.emit('pick', month)\n      }\n    }\n\n    return {\n      tbodyRef,\n      currentCellRef,\n      handleMouseMove,\n      handleMonthTableClick,\n      focus,\n      isSelectedCell,\n      rows,\n      getCellStyle,\n      t,\n      months,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}